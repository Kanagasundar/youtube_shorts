name: YouTube Automation

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9:00 AM UTC
  workflow_dispatch:
    inputs:
      topic_override:
        description: 'Override today''s topic (optional)'
        required: false
        type: string
      category_override:
        description: 'Override category (optional)'
        required: false
        type: string

jobs:
  create-and-upload-video:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg espeak espeak-data libespeak1 libespeak-dev
        sudo apt-get install -y python3-dev python3-pip python3-venv
        sudo apt-get install -y libffi-dev libssl-dev libxml2-dev libxslt-dev
        sudo apt-get install -y build-essential libasound2-dev portaudio19-dev
        sudo apt-get install -y jq
        sudo apt-get install -y libavcodec-dev libavformat-dev libavdevice-dev
        sudo apt-get install -y libavfilter-dev libswscale-dev libswresample-dev
        ffmpeg -version
        echo "✅ System dependencies installed"

    - name: Clean pip cache and upgrade pip
      run: |
        python -m pip cache purge
        python -m pip install --upgrade pip setuptools wheel
        pip --version

    - name: Install Python dependencies in correct order
      run: |
        echo "📦 Installing Python dependencies in optimized order..."
        
        # Install base dependencies first
        echo "🔧 Installing base dependencies..."
        pip install --no-cache-dir --upgrade \
          setuptools==69.5.1 \
          wheel==0.43.0 \
          pip==24.0
        
        # Install core utilities
        echo "🔧 Installing core utilities..."
        pip install --no-cache-dir \
          six==1.16.0 \
          certifi==2024.2.2 \
          charset-normalizer==3.3.2 \
          idna==3.7 \
          urllib3==2.2.1 \
          requests==2.31.0
        
        # Install numpy first (many packages depend on it)
        echo "🔧 Installing numpy..."
        pip install --no-cache-dir numpy==1.26.4
        
        # Install Google Auth dependencies in correct order
        echo "🔧 Installing Google Auth stack..."
        pip install --no-cache-dir \
          cachetools==5.3.3 \
          pyasn1==0.6.0 \
          pyasn1-modules==0.4.0 \
          rsa==4.9
        
        pip install --no-cache-dir google-auth==2.29.0
        pip install --no-cache-dir google-auth-oauthlib==1.2.0
        pip install --no-cache-dir \
          google-auth-httplib2==0.2.0 \
          googleapis-common-protos==1.63.0 \
          google-api-core==2.19.0
        
        pip install --no-cache-dir google-api-python-client==2.129.0
        
        # Install image processing
        echo "🔧 Installing image processing..."
        pip install --no-cache-dir Pillow==10.3.0
        
        # Install video processing dependencies
        echo "🔧 Installing video processing dependencies..."
        pip install --no-cache-dir \
          decorator==5.1.1 \
          imageio==2.34.1 \
          imageio-ffmpeg==0.5.1 \
          proglog==0.1.10 \
          tqdm==4.66.4
        
        # Install MoviePy with specific version that works
        echo "🔧 Installing MoviePy..."
        pip install --no-cache-dir moviepy==1.0.3
        
        # Install audio processing
        echo "🔧 Installing audio processing..."
        pip install --no-cache-dir \
          gTTS==2.5.1 \
          pydub==0.25.1
        
        # Install OpenAI
        echo "🔧 Installing OpenAI..."
        pip install --no-cache-dir \
          openai==1.30.1 \
          python-dotenv==1.0.1
        
        # Install additional utilities
        echo "🔧 Installing additional utilities..."
        pip install --no-cache-dir \
          colorama==0.4.6 \
          python-dateutil==2.9.0.post0 \
          pytz==2024.1
        
        echo "✅ All dependencies installed successfully"

    - name: Verify installations with enhanced testing
      run: |
        echo "🔍 Verifying critical package installations..."
        python -c "
        import sys
        import importlib.util
        
        print('🐍 Python version:', sys.version)
        
        # Test packages with enhanced error handling
        test_results = []
        
        def test_import(module_name, import_path=None, display_name=None):
            if import_path is None:
                import_path = module_name
            if display_name is None:
                display_name = module_name
                
            try:
                if '.' in import_path:
                    # Handle nested imports
                    parts = import_path.split('.')
                    module = __import__(parts[0])
                    for part in parts[1:]:
                        module = getattr(module, part)
                else:
                    module = __import__(import_path)
                
                version = getattr(module, '__version__', 'unknown')
                print(f'✅ {display_name}: {version}')
                test_results.append((display_name, True, version))
                return True
            except Exception as e:
                print(f'❌ {display_name}: {str(e)}')
                test_results.append((display_name, False, str(e)))
                return False
        
        # Test all critical packages
        print('\\n🔍 Testing imports...')
        test_import('numpy')
        test_import('PIL', display_name='Pillow')
        test_import('openai')
        test_import('gtts', display_name='gTTS')
        test_import('pydub')
        
        # Special handling for moviepy
        try:
            import moviepy
            import moviepy.editor
            print(f'✅ MoviePy: {getattr(moviepy, \"__version__\", \"unknown\")} (with editor)')
            test_results.append(('MoviePy', True, 'OK'))
        except Exception as e:
            print(f'❌ MoviePy: {str(e)}')
            test_results.append(('MoviePy', False, str(e)))
        
        # Special handling for google.auth
        try:
            import google.auth
            import google_auth_oauthlib
            import googleapiclient.discovery
            print(f'✅ Google Auth: {getattr(google.auth, \"__version__\", \"unknown\")}')
            test_results.append(('Google Auth', True, 'OK'))
        except Exception as e:
            print(f'❌ Google Auth: {str(e)}')
            test_results.append(('Google Auth', False, str(e)))
        
        test_import('requests')
        
        # Summary
        failed = [name for name, success, _ in test_results if not success]
        if failed:
            print(f'\\n❌ Failed imports: {failed}')
            print('\\n🔧 Attempting to fix failed imports...')
            
            # Try to fix common issues
            import subprocess
            import os
            
            if 'MoviePy' in failed:
                print('🔧 Fixing MoviePy installation...')
                subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'moviepy'], 
                             capture_output=True)
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 
                              '--force-reinstall', 'moviepy==1.0.3'], capture_output=True)
                try:
                    import moviepy.editor
                    print('✅ MoviePy fixed!')
                except:
                    print('❌ MoviePy still failing')
            
            if 'Google Auth' in failed:
                print('🔧 Fixing Google Auth installation...')
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 
                              '--force-reinstall', 'google-auth==2.29.0'], capture_output=True)
                try:
                    import google.auth
                    print('✅ Google Auth fixed!')
                except:
                    print('❌ Google Auth still failing')
        else:
            print('\\n✅ All critical packages verified successfully!')
        "

    - name: Create output directories
      run: |
        mkdir -p output
        mkdir -p logs
        echo "✅ Output directories created"

    - name: Set up YouTube credentials
      env:
        YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
        YOUTUBE_TOKEN: ${{ secrets.YOUTUBE_TOKEN }}
      run: |
        echo "🔍 Setting up YouTube credentials..."
        
        CRED_SET="${{ secrets.YOUTUBE_CREDENTIALS != '' }}"
        TOKEN_SET="${{ secrets.YOUTUBE_TOKEN != '' }}"
        
        echo "📋 Secret availability check:"
        echo "   - YOUTUBE_CREDENTIALS: $CRED_SET"
        echo "   - YOUTUBE_TOKEN: $TOKEN_SET"
        
        if [ -n "$YOUTUBE_CREDENTIALS" ] && [ "$YOUTUBE_CREDENTIALS" != "" ]; then
          echo "✅ YOUTUBE_CREDENTIALS found via environment variable"
          echo "$YOUTUBE_CREDENTIALS" > credentials.json
        elif [ "${{ secrets.YOUTUBE_CREDENTIALS }}" != "" ]; then
          echo "✅ YOUTUBE_CREDENTIALS found via direct secret"
          cat > credentials.json << 'EOL'
        ${{ secrets.YOUTUBE_CREDENTIALS }}
        EOL
        else
          echo "❌ YOUTUBE_CREDENTIALS not available through either method"
        fi
        
        if [ -f credentials.json ]; then
          FILE_SIZE=$(wc -c < credentials.json)
          echo "✅ credentials.json created (size: $FILE_SIZE bytes)"
          
          if [ $FILE_SIZE -gt 10 ]; then
            if jq empty credentials.json > /dev/null 2>&1; then
              echo "✅ credentials.json is valid JSON"
              
              if jq -e '.type, .project_id, .client_id' credentials.json > /dev/null 2>&1; then
                echo "✅ credentials.json contains required Google API fields"
                echo "YOUTUBE_CREDENTIALS_VALID=true" >> $GITHUB_ENV
              else
                echo "❌ credentials.json missing required Google API fields"
                echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
              fi
            else
              echo "❌ credentials.json is not valid JSON"
              echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
            fi
          else
            echo "❌ credentials.json file is too small (likely empty)"
            echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
          fi
        else
          echo "❌ credentials.json file was not created"
          echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
        fi
        
        if [ -n "$YOUTUBE_TOKEN" ] && [ "$YOUTUBE_TOKEN" != "" ]; then
          echo "$YOUTUBE_TOKEN" | base64 -d > token.pickle 2>/dev/null
          if [ -f token.pickle ] && [ -s token.pickle ]; then
            echo "✅ YouTube token restored successfully"
          else
            echo "⚠️ YouTube token restoration failed"
          fi
        elif [ "${{ secrets.YOUTUBE_TOKEN }}" != "" ]; then
          echo "${{ secrets.YOUTUBE_TOKEN }}" | base64 -d > token.pickle 2>/dev/null
          if [ -f token.pickle ] && [ -s token.pickle ]; then
            echo "✅ YouTube token restored via direct secret"
          else
            echo "⚠️ YouTube token restoration failed via direct secret"
          fi
        else
          echo "ℹ️ No YouTube token found (normal for first run)"
        fi
        
        echo "✅ YouTube credentials setup completed"

    - name: Set upload status
      run: |
        echo "🔧 Determining upload status..."
        ENABLE_UPLOAD_VAR="${{ vars.ENABLE_UPLOAD || 'true' }}"
        echo "📋 Configuration check:"
        echo "   - YOUTUBE_CREDENTIALS_VALID: ${{ env.YOUTUBE_CREDENTIALS_VALID }}"
        echo "   - ENABLE_UPLOAD variable: $ENABLE_UPLOAD_VAR"
        
        if [ "${{ env.YOUTUBE_CREDENTIALS_VALID }}" = "true" ] && [ "$ENABLE_UPLOAD_VAR" = "true" ]; then
          echo "✅ Upload will be enabled"
          echo "UPLOAD_TO_YOUTUBE=true" >> $GITHUB_ENV
        else
          echo "⚠️ Upload will be disabled"
          echo "UPLOAD_TO_YOUTUBE=false" >> $GITHUB_ENV
        fi

    - name: Create environment file
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ OPENAI_API_KEY is not set in repository secrets"
          exit 1
        fi
        
        cat > .env << EOF
        OPENAI_API_KEY=$OPENAI_API_KEY
        VIDEO_PRIVACY=$VIDEO_PRIVACY
        VIDEO_CATEGORY_ID=$VIDEO_CATEGORY_ID
        UPLOAD_TO_YOUTUBE=${{ env.UPLOAD_TO_YOUTUBE }}
        EOF
        
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" >> .env
          echo "DISCORD_NOTIFICATIONS_ENABLED=true" >> $GITHUB_ENV
        else
          echo "DISCORD_NOTIFICATIONS_ENABLED=false" >> $GITHUB_ENV
        fi
        
        if [ -n "${{ github.event.inputs.topic_override }}" ]; then
          echo "TOPIC_OVERRIDE=${{ github.event.inputs.topic_override }}" >> .env
        fi
        
        if [ -n "${{ github.event.inputs.category_override }}" ]; then
          echo "CATEGORY_OVERRIDE=${{ github.event.inputs.category_override }}" >> .env
        fi
        
        echo "✅ Environment file created"

    - name: Run YouTube automation
      id: automation
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        UPLOAD_TO_YOUTUBE: ${{ env.UPLOAD_TO_YOUTUBE }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        TOPIC_OVERRIDE: ${{ github.event.inputs.topic_override }}
        CATEGORY_OVERRIDE: ${{ github.event.inputs.category_override }}
        PYTHONUNBUFFERED: "1"
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/utils
      run: |
        echo "🚀 Starting YouTube automation..."
        echo "📅 Timestamp: $(date)"
        echo "🐍 Python version: $(python --version)"
        echo "📁 Working directory: $(pwd)"
        echo "📋 Final configuration:"
        echo "   - YouTube credentials valid: ${{ env.YOUTUBE_CREDENTIALS_VALID }}"
        echo "   - Upload enabled: ${{ env.UPLOAD_TO_YOUTUBE }}"
        echo "   - Video privacy: $VIDEO_PRIVACY"
        
        set -o pipefail
        python main.py 2>&1 | tee automation.log
        EXIT_CODE=${PIPESTATUS[0]}
        
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "❌ Automation failed with exit code $EXIT_CODE"
          echo "📋 Last 20 lines of output:"
          tail -20 automation.log || echo "Could not read log file"
          exit $EXIT_CODE
        fi
        
        echo "✅ Automation completed successfully"

    - name: Save updated YouTube token
      if: always() && env.YOUTUBE_CREDENTIALS_VALID == 'true'
      id: save_token
      run: |
        if [ -f token.pickle ]; then
          base64 -w 0 token.pickle > token_updated.txt
          echo "token_content=$(cat token_updated.txt)" >> $GITHUB_OUTPUT
          echo "✅ Updated token prepared for storage"
        else
          echo "ℹ️ No token.pickle file found to save"
        fi

    - name: Upload artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: automation-failure-logs-${{ github.run_number }}
        path: |
          automation.log
          output/
          logs/
          *.json
          *.txt
          *.env
        retention-days: 7

    - name: Upload successful artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: automation-success-${{ github.run_number }}
        path: |
          output/
          logs/
          automation.log
        retention-days: 3

    - name: Extract video information
      if: success()
      id: video_info
      run: |
        VIDEO_TITLE=$(grep -E "^✅ Topic:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        VIDEO_ID=$(grep "Video uploaded with ID:" automation.log | tail -1 | awk '{print $NF}' 2>/dev/null || echo "")
        VIDEO_CATEGORY=$(grep -E "^✅ Category:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        
        VIDEO_TITLE=$(echo "$VIDEO_TITLE" | sed 's/[^a-zA-Z0-9 .,!?-]//g' | head -c 100)
        VIDEO_ID=$(echo "$VIDEO_ID" | grep -E '^[a-zA-Z0-9_-]{11}$' || echo "")
        
        echo "video_title=$VIDEO_TITLE" >> $GITHUB_OUTPUT
        echo "video_id=$VIDEO_ID" >> $GITHUB_OUTPUT
        echo "video_category=$VIDEO_CATEGORY" >> $GITHUB_OUTPUT

    - name: Send success notification
      if: success() && env.DISCORD_NOTIFICATIONS_ENABLED == 'true'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        VIDEO_TITLE="${{ steps.video_info.outputs.video_title }}"
        VIDEO_ID="${{ steps.video_info.outputs.video_id }}"
        VIDEO_CATEGORY="${{ steps.video_info.outputs.video_category }}"
        UPLOAD_STATUS="${{ env.UPLOAD_TO_YOUTUBE == 'true' && 'Uploaded' || 'Generated (Upload Disabled)' }}"
        
        if [ -n "$VIDEO_ID" ] && [ "$VIDEO_ID" != "" ]; then
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "✅ YouTube Video Published Successfully!",
            "description": "**Title:** ${VIDEO_TITLE}\n**Category:** ${VIDEO_CATEGORY}\n**Video ID:** ${VIDEO_ID}\n**URL:** https://www.youtube.com/watch?v=${VIDEO_ID}",
            "color": 5763719,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "footer": {
              "text": "YouTube Automation • Run #${{ github.run_number }}"
            }
          }]
        }
        EOF
          )
        else
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "✅ YouTube Video Generated Successfully!",
            "description": "**Title:** ${VIDEO_TITLE}\n**Category:** ${VIDEO_CATEGORY}\n**Status:** ${UPLOAD_STATUS}",
            "color": 16776960,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "footer": {
              "text": "YouTube Automation • Run #${{ github.run_number }}"
            }
          }]
        }
        EOF
          )
        fi
        
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "$PAYLOAD" \
             "$DISCORD_WEBHOOK_URL" || echo "⚠️ Failed to send Discord notification"

    - name: Send failure notification
      if: failure() && env.DISCORD_NOTIFICATIONS_ENABLED == 'true'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        ERROR_MSG=$(tail -10 automation.log 2>/dev/null | tr '\n' ' ' | sed 's/"/\\"/g' | head -c 400 || echo "Unknown error - check logs")
        STEP_NAME=$(echo "${{ github.workflow }}" | head -c 50)
        
        PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "❌ YouTube Automation Failed",
            "description": "**Error:** ${ERROR_MSG}\n**Run:** #${{ github.run_number }}\n**Workflow:** ${STEP_NAME}",
            "color": 15158332,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "footer": {
              "text": "Check the Actions tab for detailed logs"
            }
          }]
        }
        EOF
        )
        
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "$PAYLOAD" \
             "$DISCORD_WEBHOOK_URL" || echo "⚠️ Failed to send Discord failure notification"

  cleanup:
    runs-on: ubuntu-latest
    needs: create-and-upload-video
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          try {
            console.log('🧹 Starting artifact cleanup...');
            
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            console.log(`Found ${artifacts.artifacts.length} total artifacts`);
            
            const oldArtifacts = artifacts.artifacts
              .filter(artifact => artifact.name.includes('automation-'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(10);
            
            console.log(`Found ${oldArtifacts.length} old artifacts to delete`);
            
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`✅ Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`⚠️ Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
            
            console.log('✅ Artifact cleanup completed');
            
          } catch (error) {
            console.log(`❌ Cleanup failed: ${error.message}`);
          }

    - name: Cleanup summary
      run: |
        echo "🧹 Artifact cleanup job completed"
        echo "📊 Workflow summary:"
        echo "   - Run number: ${{ github.run_number }}"
        echo "   - Triggered by: ${{ github.event_name }}"