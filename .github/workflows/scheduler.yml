name: YouTube Automation

on:
  schedule:
    - cron: '0 4 * * *'  # Daily at 4:00 AM UTC
  workflow_dispatch:
    inputs:
      topic_override:
        description: 'Override today''s topic (optional)'
        required: false
        type: string
      category_override:
        description: 'Override category (optional)'
        required: false
        type: string

jobs:
  create-and-upload-video:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      ACTIONS_RUNNER_DEBUG: true
      NODE_OPTIONS: "--max-old-space-size=6144"
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONIOENCODING: "utf-8"
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: "*"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg espeak espeak-data libespeak1 libespeak-dev
        sudo apt-get install -y python3-dev python3-pip python3-venv
        sudo apt-get install -y libffi-dev libssl-dev libxml2-dev libxslt-dev
        sudo apt-get install -y build-essential libasound2-dev portaudio19-dev
        sudo apt-get install -y jq
        sudo apt-get install -y libavcodec-dev libavformat-dev libavdevice-dev
        sudo apt-get install -y libavfilter-dev libswscale-dev libswresample-dev
        sudo apt-get install -y imagemagick
        
        # Configure ImageMagick policy
        POLICY_FILE="/etc/ImageMagick-6/policy.xml"
        sudo mkdir -p /etc/ImageMagick-6
        sudo bash -c "cat > $POLICY_FILE << EOF
        <?xml version=\"1.0\" encoding=\"UTF-8\"?>
        <!DOCTYPE policymap [
          <!ELEMENT policymap (policy)+>
          <!ELEMENT policy EMPTY>
          <!ATTLIST policy domain CDATA #REQUIRED>
          <!ATTLIST policy name CDATA #IMPLIED>
          <!ATTLIST policy pattern CDATA #IMPLIED>
          <!ATTLIST policy rights CDATA #IMPLIED>
          <!ATTLIST policy value CDATA #IMPLIED>
        ]>
        <policymap>
          <policy domain=\"path\" rights=\"read|write\" pattern=\"@*\"/>
          <policy domain=\"coder\" rights=\"read|write\" pattern=\"*\"/>
          <policy domain=\"delegate\" rights=\"read|write\" pattern=\"*\"/>
          <policy domain=\"filter\" rights=\"read|write\" pattern=\"*\"/>
          <policy domain=\"system\" name=\"memory\" value=\"512MiB\"/>
          <policy domain=\"system\" name=\"disk\" value=\"1GiB\"/>
          <policy domain=\"system\" name=\"thread\" value=\"2\"/>
        </policymap>
        EOF"
        sudo chmod 644 "$POLICY_FILE"
        
        # Verify installations
        ffmpeg -version
        convert -version
        echo "‚úÖ System dependencies installed"

    - name: Install Python dependencies
      run: |
        python -m pip cache purge
        python -m pip install --upgrade pip==24.2 setuptools==70.3.0 wheel==0.43.0
        pip install --no-cache-dir -r requirements.txt
        
        # Install specific versions of critical packages
        pip install --no-cache-dir \
          openai==1.40.6 \
          moviepy==1.0.2 \
          google-auth==2.28.1 \
          google-auth-oauthlib==1.2.0 \
          google-api-python-client==2.120.0 \
          gTTS==2.5.1 \
          pydub==0.25.1 \
          Pillow==10.3.0 \
          numpy==1.26.4
        
        pip list

    - name: Verify package installations
      run: |
        python -c "
        import sys
        import importlib
        
        required_packages = {
            'openai': '1.40.6',
            'moviepy': '1.0.2',
            'google-auth': '2.28.1',
            'google-auth-oauthlib': '1.2.0',
            'google-api-python-client': '2.120.0',
            'gtts': '2.5.1',
            'pydub': '0.25.1',
            'Pillow': '10.3.0',
            'numpy': '1.26.4'
        }
        
        failed = []
        
        for pkg, expected_version in required_packages.items():
            try:
                module = importlib.import_module(pkg.replace('-', '_'))
                version = getattr(module, '__version__', 'unknown')
                if version != expected_version:
                    print(f'‚ö†Ô∏è {pkg}: version mismatch (expected {expected_version}, got {version})')
                    failed.append(pkg)
                else:
                    print(f'‚úÖ {pkg}: {version}')
            except ImportError:
                print(f'‚ùå {pkg}: not installed')
                failed.append(pkg)
        
        if failed:
            print(f'\\n‚ùå Missing or incorrect versions: {failed}')
            sys.exit(1)
        else:
            print('\\n‚úÖ All packages verified successfully')
        "

    - name: Clear Python module cache
      run: |
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} +
        echo "‚úÖ Module cache cleared"

    - name: Create output directories
      run: |
        mkdir -p output
        mkdir -p logs
        echo "‚úÖ Output directories created"

    - name: Set up YouTube credentials
      env:
        YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
        YOUTUBE_TOKEN: ${{ secrets.YOUTUBE_TOKEN }}
      run: |
        echo "üîç Setting up YouTube credentials..."
        if [ -n "$YOUTUBE_CREDENTIALS" ]; then
          echo "$YOUTUBE_CREDENTIALS" > credentials.json
          echo "‚úÖ YouTube OAuth 2.0 credentials restored"
        else
          echo "‚ùå YOUTUBE_CREDENTIALS not provided"
          exit 1
        fi
        
        if [ -n "$YOUTUBE_TOKEN" ]; then
          echo "$YOUTUBE_TOKEN" | base64 -d > token.pickle
          echo "‚úÖ YouTube OAuth 2.0 token restored"
        else
          echo "‚ùå YOUTUBE_TOKEN not provided"
          exit 1
        fi

    - name: Create environment file
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
        REPLICATE_API_KEY: ${{ secrets.REPLICATE_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        cat > .env << EOF
        OPENAI_API_KEY=$OPENAI_API_KEY
        PEXELS_API_KEY=$PEXELS_API_KEY
        REPLICATE_API_KEY=$REPLICATE_API_KEY
        VIDEO_PRIVACY=$VIDEO_PRIVACY
        VIDEO_CATEGORY_ID=$VIDEO_CATEGORY_ID
        UPLOAD_TO_YOUTUBE=true
        MAX_RETRIES=5
        CLEANUP_OLD_FILES=true
        KEEP_FILES_DAYS=7
        EOF
        
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" >> .env
          echo "DISCORD_NOTIFICATIONS_ENABLED=true" >> $GITHUB_ENV
        else
          echo "DISCORD_NOTIFICATIONS_ENABLED=false" >> $GITHUB_ENV
        fi
        
        if [ -n "${{ github.event.inputs.topic_override}}" ]; then
          echo "TOPIC_OVERRIDE=${{ github.event.inputs.topic_override }}" >> .env
        fi
        
        if [ -n "${{ github.event.inputs.category_override }}" ]; then
          echo "CATEGORY_OVERRIDE=${{ github.event.inputs.category_override }}" >> .env
        fi
        
        echo "‚úÖ Environment file created"

    - name: Run YouTube automation
      id: automation
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
        REPLICATE_API_KEY: ${{ secrets.REPLICATE_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        TOPIC_OVERRIDE: ${{ github.event.inputs.topic_override }}
        CATEGORY_OVERRIDE: ${{ github.event.inputs.category_override }}
      run: |
        echo "üöÄ Starting YouTube automation..."
        echo "üîç Environment variables (sensitive values masked):"
        python -c "
        import os
        for key, value in sorted(os.environ.items()):
            if key in ['OPENAI_API_KEY', 'PEXELS_API_KEY', 'REPLICATE_API_KEY', 
                      'YOUTUBE_CREDENTIALS', 'YOUTUBE_TOKEN', 'DISCORD_WEBHOOK_URL']:
                print(f'   - {key}: ***')
            else:
                print(f'   - {key}: {value}')
        "
        
        set -o pipefail
        python main.py 2>&1 | tee automation.log
        EXIT_CODE=$PIPESTATUS[0]
        
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "‚ùå Automation failed with exit code $EXIT_CODE"
          echo "üìã Last 20 lines of output:"
          tail -20 automation.log || echo "Could not read log file"
          exit $EXIT_CODE
        fi
        
        echo "‚úÖ Automation completed successfully"

    - name: Debug environment on failure
      if: failure()
      run: |
        echo "üîç Debugging environment..."
        pip list
        python -m site
        echo "‚úÖ Environment debug info collected"

    - name: Save updated YouTube token
      if: always() && env.UPLOAD_TO_YOUTUBE == 'true'
      id: save_token
      run: |
        if [ -f token.pickle ]; then
          base64 -w 0 token.pickle > token_updated.txt
          echo "token_content=$(cat token_updated.txt)" >> $GITHUB_OUTPUT
          echo "‚úÖ Updated token prepared for storage"
        else
          echo "‚ÑπÔ∏è No token.pickle file found to save"
        fi

    - name: Upload artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: automation-failure-logs-${{ github.run_number }}
        path: |
          automation.log
          output/
          logs/
          *.json
          *.txt
          *.env
        retention-days: 7

    - name: Upload successful artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: automation-success-${{ github.run_number }}
        path: |
          output/
          logs/
          automation.log
        retention-days: 3

    - name: Extract video information
      if: success()
      id: video_info
      run: |
        VIDEO_TITLE=$(grep -E "^‚úÖ Topic:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        VIDEO_ID=$(grep "Video uploaded with ID:" automation.log | tail -1 | awk '{print $NF}' 2>/dev/null || echo "")
        VIDEO_CATEGORY=$(grep -E "^‚úÖ Category:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        
        VIDEO_TITLE=$(echo "$VIDEO_TITLE" | sed 's/[^a-zA-Z0-9 .,!?-]//g' | head -c 100)
        VIDEO_ID=$(echo "$VIDEO_ID" | grep -E '^[a-zA-Z0-9_-]{11}$' || echo "")
        
        echo "video_title=$VIDEO_TITLE" >> $GITHUB_OUTPUT
        echo "video_id=$VIDEO_ID" >> $GITHUB_OUTPUT
        echo "video_category=$VIDEO_CATEGORY" >> $GITHUB_OUTPUT

    - name: Send Discord notification
      if: always() && env.DISCORD_NOTIFICATIONS_ENABLED == 'true'
      uses: Ilshidur/action-discord@master
      with:
        args: 'Automation ${{ job.status }}: ${{ steps.video_info.outputs.video_title || "No title" }} (${{ steps.video_info.outputs.video_id || "No ID" }})'
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}