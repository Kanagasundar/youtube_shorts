name: YouTube Automation

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9:00 AM UTC
  workflow_dispatch:
    inputs:
      topic_override:
        description: 'Override today''s topic (optional)'
        required: false
        type: string
      category_override:
        description: 'Override category (optional)'
        required: false
        type: string

jobs:
  create-and-upload-video:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Increased timeout for video processing

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5  # Updated to latest version
      with:
        python-version: '3.11'  # Updated Python version
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg espeak espeak-data libespeak1 libespeak-dev
        sudo apt-get install -y python3-dev python3-pip python3-venv
        sudo apt-get install -y libffi-dev libssl-dev libxml2-dev libxslt-dev
        sudo apt-get install -y build-essential libasound2-dev portaudio19-dev
        sudo apt-get install -y jq  # Added for JSON validation
        # Verify ffmpeg installation
        ffmpeg -version
        echo "✅ System dependencies installed"

    - name: Upgrade pip and setuptools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "✅ Pip upgraded to $(pip --version)"

    - name: Install Python dependencies
      run: |
        echo "📦 Installing Python dependencies..."
        python -m pip install --no-cache-dir -r requirements.txt
        echo "✅ Requirements installed from requirements.txt"

    - name: Verify critical installations
      run: |
        echo "🔍 Verifying critical package installations..."
        python -c "
        import sys
        
        # Test packages individually for better error handling
        packages_to_test = [
            ('numpy', 'import numpy; print(f\"✅ numpy: {numpy.__version__}\")'),
            ('Pillow', 'import PIL; print(f\"✅ Pillow: {PIL.__version__}\")'),
            ('openai', 'import openai; print(f\"✅ openai: {openai.__version__}\")'),
            ('gTTS', 'import gtts; print(f\"✅ gTTS: {gtts.__version__}\")'),
            ('google-auth', 'import google.auth; print(f\"✅ google-auth: {google.auth.__version__}\")'),
            ('google-auth-oauthlib', 'import google_auth_oauthlib; print(\"✅ google-auth-oauthlib: installed\")'),
            ('google-api-python-client', 'import googleapiclient; print(\"✅ google-api-python-client: installed\")'),
            ('moviepy', 'import moviepy; print(f\"✅ moviepy: {moviepy.__version__}\")')
        ]
        
        failed_packages = []
        
        for package_name, test_code in packages_to_test:
            try:
                exec(test_code)
            except Exception as e:
                print(f'❌ {package_name}: {e}')
                failed_packages.append(package_name)
        
        # Additional Google packages verification
        try:
            from google.auth.transport.requests import Request
            print('✅ google.auth.transport.requests: OK')
        except Exception as e:
            print(f'❌ google.auth.transport.requests: {e}')
            failed_packages.append('google-auth-transport')
        
        try:
            from googleapiclient.discovery import build
            print('✅ googleapiclient.discovery: OK')
        except Exception as e:
            print(f'❌ googleapiclient.discovery: {e}')
            failed_packages.append('google-api-client-discovery')
        
        try:
            from google_auth_oauthlib.flow import InstalledAppFlow
            print('✅ google_auth_oauthlib.flow: OK')
        except Exception as e:
            print(f'❌ google_auth_oauthlib.flow: {e}')
            failed_packages.append('google-auth-oauthlib-flow')
        
        if failed_packages:
            print(f'\\n❌ Failed packages: {failed_packages}')
            sys.exit(1)
        
        print('\\n✅ All critical packages verified successfully')
        "

    - name: Create output directories
      run: |
        mkdir -p output
        mkdir -p logs
        echo "✅ Output directories created"

    - name: Set up YouTube credentials
      env:
        YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
        YOUTUBE_TOKEN: ${{ secrets.YOUTUBE_TOKEN }}
      run: |
        echo "🔍 Setting up YouTube credentials..."
        
        # Debug: Check if secrets are available
        CRED_SET="${{ secrets.YOUTUBE_CREDENTIALS != '' }}"
        TOKEN_SET="${{ secrets.YOUTUBE_TOKEN != '' }}"
        
        echo "📋 Secret availability check:"
        echo "   - YOUTUBE_CREDENTIALS: $CRED_SET"
        echo "   - YOUTUBE_TOKEN: $TOKEN_SET"
        
        # Method 1: Try environment variable approach
        if [ -n "$YOUTUBE_CREDENTIALS" ] && [ "$YOUTUBE_CREDENTIALS" != "" ]; then
          echo "✅ YOUTUBE_CREDENTIALS found via environment variable"
          echo "$YOUTUBE_CREDENTIALS" > credentials.json
        # Method 2: Try direct secret substitution
        elif [ "${{ secrets.YOUTUBE_CREDENTIALS }}" != "" ]; then
          echo "✅ YOUTUBE_CREDENTIALS found via direct secret"
          cat > credentials.json << 'EOL'
        ${{ secrets.YOUTUBE_CREDENTIALS }}
        EOL
        else
          echo "❌ YOUTUBE_CREDENTIALS not available through either method"
        fi
        
        # Validate credentials file
        if [ -f credentials.json ]; then
          FILE_SIZE=$(wc -c < credentials.json)
          echo "✅ credentials.json created (size: $FILE_SIZE bytes)"
          
          if [ $FILE_SIZE -gt 10 ]; then
            # Validate JSON format (without showing content)
            if jq empty credentials.json > /dev/null 2>&1; then
              echo "✅ credentials.json is valid JSON"
              
              # Check for required Google API fields
              if jq -e '.type, .project_id, .client_id' credentials.json > /dev/null 2>&1; then
                echo "✅ credentials.json contains required Google API fields"
                echo "YOUTUBE_CREDENTIALS_VALID=true" >> $GITHUB_ENV
              else
                echo "❌ credentials.json missing required Google API fields"
                echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
              fi
            else
              echo "❌ credentials.json is not valid JSON"
              echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
              echo "📄 First 100 characters of file:"
              head -c 100 credentials.json
            fi
          else
            echo "❌ credentials.json file is too small (likely empty)"
            echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
          fi
        else
          echo "❌ credentials.json file was not created"
          echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
        fi
        
        # Handle YouTube token restoration
        if [ -n "$YOUTUBE_TOKEN" ] && [ "$YOUTUBE_TOKEN" != "" ]; then
          echo "$YOUTUBE_TOKEN" | base64 -d > token.pickle 2>/dev/null
          if [ -f token.pickle ] && [ -s token.pickle ]; then
            echo "✅ YouTube token restored successfully"
          else
            echo "⚠️ YouTube token restoration failed"
          fi
        elif [ "${{ secrets.YOUTUBE_TOKEN }}" != "" ]; then
          echo "${{ secrets.YOUTUBE_TOKEN }}" | base64 -d > token.pickle 2>/dev/null
          if [ -f token.pickle ] && [ -s token.pickle ]; then
            echo "✅ YouTube token restored via direct secret"
          else
            echo "⚠️ YouTube token restoration failed via direct secret"
          fi
        else
          echo "ℹ️ No YouTube token found (normal for first run)"
        fi
        
        # Final status
        if [ "$YOUTUBE_CREDENTIALS_VALID" = "true" ]; then
          echo "✅ YouTube credentials setup completed successfully"
        else
          echo "⚠️ YouTube credentials setup failed - upload will be disabled"
          echo "💡 Troubleshooting tips:"
          echo "   1. Verify YOUTUBE_CREDENTIALS secret exists in repository settings"
          echo "   2. Ensure the secret contains valid JSON from Google Cloud Console"
          echo "   3. Check that the JSON includes all required fields (type, project_id, client_id, etc.)"
        fi

    - name: Create environment file
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        ENABLE_UPLOAD: ${{ vars.ENABLE_UPLOAD || 'true' }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        # Validate required secrets
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ OPENAI_API_KEY is not set in repository secrets"
          exit 1
        fi
        
        # Determine upload capability
        UPLOAD_ENABLED="false"
        if [ "$ENABLE_UPLOAD" = "true" ] && [ "$YOUTUBE_CREDENTIALS_VALID" = "true" ]; then
          UPLOAD_ENABLED="true"
        elif [ "$ENABLE_UPLOAD" = "true" ]; then
          echo "⚠️ Upload requested but credentials invalid - disabling upload"
        fi
        
        # Create .env file
        cat > .env << EOF
        OPENAI_API_KEY=$OPENAI_API_KEY
        VIDEO_PRIVACY=$VIDEO_PRIVACY
        VIDEO_CATEGORY_ID=$VIDEO_CATEGORY_ID
        ENABLE_UPLOAD=$UPLOAD_ENABLED
        UPLOAD_TO_YOUTUBE=$UPLOAD_ENABLED
        EOF
        
        # Add optional variables
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" >> .env
          echo "DISCORD_NOTIFICATIONS_ENABLED=true" >> $GITHUB_ENV
        else
          echo "DISCORD_NOTIFICATIONS_ENABLED=false" >> $GITHUB_ENV
        fi
        
        if [ -n "${{ github.event.inputs.topic_override }}" ]; then
          echo "TOPIC_OVERRIDE=${{ github.event.inputs.topic_override }}" >> .env
        fi
        
        if [ -n "${{ github.event.inputs.category_override }}" ]; then
          echo "CATEGORY_OVERRIDE=${{ github.event.inputs.category_override }}" >> .env
        fi
        
        echo "✅ Environment file created with $(wc -l < .env) variables"
        echo "📋 Upload enabled: $UPLOAD_ENABLED"
        
        # Show sanitized version
        sed 's/\(.*API_KEY=\).*/\1[HIDDEN]/' .env | sed 's/\(.*WEBHOOK_URL=\).*/\1[HIDDEN]/'

    - name: Run YouTube automation
      id: automation
      env:
        # Explicitly pass all environment variables to the Python process
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        ENABLE_UPLOAD: ${{ vars.ENABLE_UPLOAD || 'true' }}
        UPLOAD_TO_YOUTUBE: ${{ env.YOUTUBE_CREDENTIALS_VALID == 'true' && vars.ENABLE_UPLOAD || 'false' }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        TOPIC_OVERRIDE: ${{ github.event.inputs.topic_override }}
        CATEGORY_OVERRIDE: ${{ github.event.inputs.category_override }}
        PYTHONUNBUFFERED: "1"  # Ensure real-time output
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/utils
      run: |
        echo "🚀 Starting YouTube automation..."
        echo "📅 Timestamp: $(date)"
        echo "🐍 Python version: $(python --version)"
        echo "📁 Working directory: $(pwd)"
        echo "📂 Directory contents:"
        ls -la
        
        # Show final upload status
        echo "📋 Final configuration:"
        echo "   - YouTube credentials valid: ${{ env.YOUTUBE_CREDENTIALS_VALID }}"
        echo "   - Upload enabled: $UPLOAD_TO_YOUTUBE"
        echo "   - Video privacy: $VIDEO_PRIVACY"
        
        # Run the automation with proper error handling
        set -o pipefail
        python main.py 2>&1 | tee automation.log
        EXIT_CODE=${PIPESTATUS[0]}
        
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "❌ Automation failed with exit code $EXIT_CODE"
          echo "📋 Last 20 lines of output:"
          tail -20 automation.log || echo "Could not read log file"
          exit $EXIT_CODE
        fi
        
        echo "✅ Automation completed successfully"

    - name: Save updated YouTube token
      if: always() && env.YOUTUBE_CREDENTIALS_VALID == 'true'
      id: save_token
      run: |
        if [ -f token.pickle ]; then
          base64 -w 0 token.pickle > token_updated.txt
          echo "token_content=$(cat token_updated.txt)" >> $GITHUB_OUTPUT
          echo "✅ Updated token prepared for storage"
          
          # Optionally, you could save this back to secrets using GitHub API
          # This would require a personal access token with repo permissions
          echo "💡 Consider updating your YOUTUBE_TOKEN secret with the new token"
          echo "📄 New token (base64): $(head -c 50 token_updated.txt)..."
        else
          echo "ℹ️ No token.pickle file found to save"
        fi

    - name: Upload artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: automation-failure-logs-${{ github.run_number }}
        path: |
          automation.log
          output/
          logs/
          *.json
          *.txt
          *.env
        retention-days: 7

    - name: Upload successful artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: automation-success-${{ github.run_number }}
        path: |
          output/
          logs/
          automation.log
        retention-days: 3

    - name: Extract video information
      if: success()
      id: video_info
      run: |
        # Extract video information from logs
        VIDEO_TITLE=$(grep -E "^✅ Topic:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        VIDEO_ID=$(grep "Video uploaded with ID:" automation.log | tail -1 | awk '{print $NF}' 2>/dev/null || echo "")
        VIDEO_CATEGORY=$(grep -E "^✅ Category:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        
        # Clean up extracted values
        VIDEO_TITLE=$(echo "$VIDEO_TITLE" | sed 's/[^a-zA-Z0-9 .,!?-]//g' | head -c 100)
        VIDEO_ID=$(echo "$VIDEO_ID" | grep -E '^[a-zA-Z0-9_-]{11}$' || echo "")
        
        echo "video_title=$VIDEO_TITLE" >> $GITHUB_OUTPUT
        echo "video_id=$VIDEO_ID" >> $GITHUB_OUTPUT
        echo "video_category=$VIDEO_CATEGORY" >> $GITHUB_OUTPUT
        
        echo "📺 Extracted video info:"
        echo "   Title: $VIDEO_TITLE"
        echo "   ID: $VIDEO_ID"
        echo "   Category: $VIDEO_CATEGORY"

    - name: Send success notification
      if: success() && env.DISCORD_NOTIFICATIONS_ENABLED == 'true'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        VIDEO_TITLE="${{ steps.video_info.outputs.video_title }}"
        VIDEO_ID="${{ steps.video_info.outputs.video_id }}"
        VIDEO_CATEGORY="${{ steps.video_info.outputs.video_category }}"
        UPLOAD_STATUS="${{ env.YOUTUBE_CREDENTIALS_VALID == 'true' && 'Uploaded' || 'Generated (Upload Disabled)' }}"
        
        if [ -n "$VIDEO_ID" ] && [ "$VIDEO_ID" != "" ]; then
          # Create JSON payload for successful upload
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "✅ YouTube Video Published Successfully!",
            "description": "**Title:** ${VIDEO_TITLE}\n**Category:** ${VIDEO_CATEGORY}\n**Video ID:** ${VIDEO_ID}\n**URL:** https://www.youtube.com/watch?v=${VIDEO_ID}\n**Shorts:** https://youtube.com/shorts/${VIDEO_ID}",
            "color": 5763719,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "footer": {
              "text": "YouTube Automation • Run #${{ github.run_number }}"
            }
          }]
        }
        EOF
          )
        else
          # Create JSON payload for generation without upload
          PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "✅ YouTube Video Generated Successfully!",
            "description": "**Title:** ${VIDEO_TITLE}\n**Category:** ${VIDEO_CATEGORY}\n**Status:** ${UPLOAD_STATUS}\n**Note:** Video was generated but not uploaded (check credentials setup)",
            "color": 16776960,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "footer": {
              "text": "YouTube Automation • Run #${{ github.run_number }}"
            }
          }]
        }
        EOF
          )
        fi
        
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "$PAYLOAD" \
             "$DISCORD_WEBHOOK_URL" || echo "⚠️ Failed to send Discord notification"

    - name: Send failure notification
      if: failure() && env.DISCORD_NOTIFICATIONS_ENABLED == 'true'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        # Extract error information
        ERROR_MSG=$(tail -10 automation.log 2>/dev/null | tr '\n' ' ' | sed 's/"/\\"/g' | head -c 400 || echo "Unknown error - check logs")
        STEP_NAME=$(echo "${{ github.workflow }}" | head -c 50)
        
        # Create failure notification
        PAYLOAD=$(cat << EOF
        {
          "embeds": [{
            "title": "❌ YouTube Automation Failed",
            "description": "**Error:** ${ERROR_MSG}\n**Run:** #${{ github.run_number }}\n**Workflow:** ${STEP_NAME}\n**Branch:** ${{ github.ref_name }}\n**Commit:** ${{ github.sha }}",
            "color": 15158332,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "footer": {
              "text": "Check the Actions tab for detailed logs"
            }
          }]
        }
        EOF
        )
        
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "$PAYLOAD" \
             "$DISCORD_WEBHOOK_URL" || echo "⚠️ Failed to send Discord failure notification"

  cleanup:
    runs-on: ubuntu-latest
    needs: create-and-upload-video
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          try {
            console.log('🧹 Starting artifact cleanup...');
            
            // Get all artifacts for this repository
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            console.log(`Found ${artifacts.artifacts.length} total artifacts`);
            
            // Filter and sort artifacts by creation date (newest first)
            const oldArtifacts = artifacts.artifacts
              .filter(artifact => artifact.name.includes('automation-'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(10); // Keep only the 10 most recent
            
            console.log(`Found ${oldArtifacts.length} old artifacts to delete`);
            
            // Delete old artifacts
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`✅ Deleted artifact: ${artifact.name} (${artifact.created_at})`);
              } catch (error) {
                console.log(`⚠️ Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
            
            console.log('✅ Artifact cleanup completed');
            
          } catch (error) {
            console.log(`❌ Cleanup failed: ${error.message}`);
            // Don't fail the workflow if cleanup fails
          }

    - name: Cleanup summary
      run: |
        echo "🧹 Artifact cleanup job completed"
        echo "📊 Workflow summary:"
        echo "   - Run number: ${{ github.run_number }}"
        echo "   - Triggered by: ${{ github.event_name }}"
        echo "   - Branch: ${{ github.ref_name }}"
        echo "   - Commit: ${{ github.sha }}"