```yaml
name: YouTube Automation

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9:00 AM UTC
  workflow_dispatch:
    inputs:
      topic_override:
        description: 'Override today''s topic (optional)'
        required: false
        type: string
      category_override:
        description: 'Override category (optional)'
        required: false
        type: string

jobs:
  create-and-upload-video:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg espeak espeak-data libespeak1 libespeak-dev
        sudo apt-get install -y python3-dev python3-pip python3-venv
        sudo apt-get install -y libffi-dev libssl-dev libxml2-dev libxslt-dev
        sudo apt-get install -y build-essential libasound2-dev portaudio19-dev
        sudo apt-get install -y jq
        sudo apt-get install -y libavcodec-dev libavformat-dev libavdevice-dev
        sudo apt-get install -y libavfilter-dev libswscale-dev libswresample-dev
        sudo apt-get install -y imagemagick
        # Modify ImageMagick policy to allow text operations
        POLICY_UPDATED=false
        for POLICY_FILE in /etc/ImageMagick-6/policy.xml /etc/ImageMagick/policy.xml; do
          if [ -f "$POLICY_FILE" ]; then
            sudo sed -i 's/<policy domain="path" rights="none" pattern="@*" \/>/<policy domain="path" rights="read|write" pattern="@*" \/>/' "$POLICY_FILE" || {
              echo "‚ùå Failed to modify $POLICY_FILE"
              exit 1
            }
            echo "‚úÖ Modified ImageMagick policy at $POLICY_FILE"
            POLICY_UPDATED=true
          fi
        done
        if [ "$POLICY_UPDATED" = "false" ]; then
          echo "‚ö†Ô∏è No ImageMagick policy file found at expected locations"
          # Create a minimal policy file if none exists
          sudo mkdir -p /etc/ImageMagick-6
          sudo bash -c 'cat > /etc/ImageMagick-6/policy.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE policymap [
            <!ELEMENT policymap (policy)+>
            <!ELEMENT policy EMPTY>
            <!ATTLIST policy domain CDATA #REQUIRED>
            <!ATTLIST policy name CDATA #IMPLIED>
            <!ATTLIST policy pattern CDATA #IMPLIED>
            <!ATTLIST policy rights CDATA #IMPLIED>
            <!ATTLIST policy value CDATA #IMPLIED>
          ]>
          <policymap>
            <policy domain="path" rights="read|write" pattern="@*"/>
          </policymap>
          EOF'
          echo "‚úÖ Created minimal ImageMagick policy file at /etc/ImageMagick-6/policy.xml"
          POLICY_UPDATED=true
        fi
        ffmpeg -version
        convert -version
        echo "‚úÖ System dependencies installed"

    - name: Verify system dependencies
      run: |
        echo "üîç Verifying system dependencies..."
        ffmpeg -version || { echo "‚ùå FFmpeg not installed correctly"; exit 1; }
        convert -version || { echo "‚ùå ImageMagick not installed correctly"; exit 1; }
        POLICY_VERIFIED=false
        for POLICY_FILE in /etc/ImageMagick-6/policy.xml /etc/ImageMagick/policy.xml; do
          if [ -f "$POLICY_FILE" ] && grep -q '<policy.*domain="path".*pattern="@*".*rights="read|write"' "$POLICY_FILE"; then
            echo "‚úÖ ImageMagick policy verified at $POLICY_FILE"
            POLICY_VERIFIED=true
            break
          fi
        done
        if [ "$POLICY_VERIFIED" = "false" ]; then
          echo "‚ö†Ô∏è ImageMagick policy not found or not correctly configured, attempting to verify manually..."
          for POLICY_FILE in /etc/ImageMagick-6/policy.xml /etc/ImageMagick/policy.xml; do
            if [ -f "$POLICY_FILE" ] && grep -q 'read|write.*@*' "$POLICY_FILE"; then
              echo "‚úÖ ImageMagick policy verified (fallback check) at $POLICY_FILE"
              POLICY_VERIFIED=true
              break
            fi
          done
        fi
        if [ "$POLICY_VERIFIED" = "false" ]; then
          echo "‚ùå ImageMagick policy not correctly configured"
          exit 1
        fi
        echo "‚úÖ FFmpeg and ImageMagick verified"

    - name: Check disk space
      run: |
        echo "üîç Checking available disk space..."
        df -h
        echo "‚úÖ Disk space check completed"

    - name: Install Python dependencies
      run: |
        echo "üì¶ Installing Python dependencies..."
        python -m pip cache purge
        python -m pip install --upgrade pip==24.2 setuptools==70.3.0 wheel==0.43.0
        pip install --no-cache-dir -r requirements.txt
        pip install --no-cache-dir --force-reinstall moviepy==1.0.2 openai==1.40.6 numpy==1.26.4 python-dotenv==1.0.1
        pip list  # Log installed packages for debugging
        echo "‚úÖ All dependencies installed successfully"

    - name: Check for proxies references
      run: |
        echo "üîç Checking for 'proxies' in Python files..."
        git grep -i "proxies" *.py utils/*.py || echo "No 'proxies' references found"
        echo "‚úÖ Proxies check completed"

    - name: Log script contents for debugging
      run: |
        echo "üîç Logging contents of main.py and utils/*.py..."
        echo "üìÑ main.py:"
        cat main.py || echo "‚ùå main.py not found"
        echo "üìÑ utils/scripting.py:"
        cat utils/scripting.py || echo "‚ùå utils/scripting.py not found"
        echo "üìÑ utils/video.py:"
        cat utils/video.py || echo "‚ùå utils/video.py not found"
        echo "üìÑ utils/youtube_uploader.py:"
        cat utils/youtube_uploader.py || echo "‚ùå utils/youtube_uploader.py not found"
        echo "üìÑ utils/voice.py:"
        cat utils/voice.py || echo "‚ùå utils/voice.py not found"
        echo "üìÑ utils/thumbnail_generator.py:"
        cat utils/thumbnail_generator.py || echo "‚ùå utils/thumbnail_generator.py not found"
        echo "üìÑ utils/topic_rotator.py:"
        cat utils/topic_rotator.py || echo "‚ùå utils/topic_rotator.py not found"
        echo "‚úÖ Script contents logged"

    - name: Fix namespace packages and verify installations
      run: |
        echo "üîß Fixing namespace packages and performing comprehensive verification..."
        python -c "
        import sys
        import subprocess
        import importlib
        import os
        
        print('üêç Python version:', sys.version)
        print('üîç Python executable:', sys.executable)
        print('üìÅ Python path:')
        for path in sys.path:
            print(f'   {path}')
        
        # Fix Google namespace package issue
        print('\nüîß Fixing Google namespace packages...')
        
        # Find site-packages directories safely
        site_packages_dirs = []
        for path in sys.path:
            if path and 'site-packages' in path and os.path.exists(path):
                site_packages_dirs.append(path)
        
        print(f'Found site-packages directories: {site_packages_dirs}')
        
        # Look for Google packages in site-packages directories
        google_packages = []
        for site_dir in site_packages_dirs:
            try:
                packages = [pkg for pkg in os.listdir(site_dir) 
                           if pkg.startswith('google') and os.path.isdir(os.path.join(site_dir, pkg))]
                google_packages.extend(packages)
            except (OSError, PermissionError) as e:
                print(f'Could not list {site_dir}: {e}')
        
        print(f'Found Google packages: {list(set(google_packages))}')
        
        # Remove any conflicting __pycache__ directories
        import shutil
        for site_packages in site_packages_dirs:
            google_dir = os.path.join(site_packages, 'google')
            if os.path.exists(google_dir):
                pycache_dir = os.path.join(google_dir, '__pycache__')
                if os.path.exists(pycache_dir):
                    try:
                        shutil.rmtree(pycache_dir)
                        print(f'‚úÖ Removed {pycache_dir}')
                    except Exception as e:
                        print(f'‚ö†Ô∏è Could not remove {pycache_dir}: {e}')
        
        # Test packages with enhanced error handling
        test_results = []
        
        def test_import_advanced(module_name, import_statement, display_name=None):
            if display_name is None:
                display_name = module_name
                
            try:
                # Clear any cached imports
                if module_name in sys.modules:
                    del sys.modules[module_name]
                
                # Clear related modules for complex packages
                if module_name == 'moviepy':
                    modules_to_clear = [mod for mod in sys.modules.keys() if 'moviepy' in mod]
                    for mod in modules_to_clear:
                        del sys.modules[mod]
                elif module_name.startswith('google'):
                    modules_to_clear = [mod for mod in sys.modules.keys() if mod.startswith('google')]
                    for mod in modules_to_clear:
                        del sys.modules[mod]
                elif module_name == 'openai':
                    modules_to_clear = [mod for mod in sys.modules.keys() if 'openai' in mod]
                    for mod in modules_to_clear:
                        del sys.modules[mod]
                
                # Execute the import statement
                exec(import_statement)
                print(f'‚úÖ {display_name}: Import successful')
                test_results.append((display_name, True, 'OK'))
                return True
            except Exception as e:
                print(f'‚ùå {display_name}: {str(e)}')
                test_results.append((display_name, False, str(e)))
                return False
        
        # Test all critical packages with proper import statements
        print('\nüîç Testing imports with advanced verification...')
        test_import_advanced('numpy', 'import numpy')
        test_import_advanced('PIL', 'from PIL import Image')
        test_import_advanced('openai', 'import openai')
        test_import_advanced('gtts', 'from gtts import gTTS')
        test_import_advanced('pydub', 'from pydub import AudioSegment')
        test_import_advanced('requests', 'import requests')
        
        # Special handling for moviepy with multiple fallback strategies
        print('\nüé¨ Testing MoviePy with fallback strategies...')
        moviepy_success = False
        
        # Strategy 1: Direct import
        try:
            import moviepy
            import moviepy.editor as mpe
            print(f'‚úÖ MoviePy Strategy 1 (direct): Success')
            moviepy_success = True
        except Exception as e:
            print(f'‚ùå MoviePy Strategy 1 failed: {e}')
            
            # Strategy 2: Reinstall and retry
            try:
                print('üîß MoviePy Strategy 2: Reinstalling...')
                subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'moviepy'], 
                             capture_output=True, check=False)
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 
                              '--no-deps', 'moviepy==1.0.2'], 
                             capture_output=True, check=True)
                
                # Clear module cache
                for mod in list(sys.modules.keys()):
                    if 'moviepy' in mod:
                        del sys.modules[mod]
                
                import moviepy.editor as mpe
                print('‚úÖ MoviePy Strategy 2 (reinstall): Success')
                moviepy_success = True
            except Exception as e2:
                print(f'‚ùå MoviePy Strategy 2 failed: {e2}')
                
                # Strategy 3: Install different version
                try:
                    print('üîß MoviePy Strategy 3: Different version...')
                    subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 
                                  '--force-reinstall', 'moviepy==1.0.2'], 
                                 capture_output=True, check=True)
                    
                    # Clear module cache again
                    for mod in list(sys.modules.keys()):
                        if 'moviepy' in mod:
                            del sys.modules[mod]
                    
                    import moviepy.editor as mpe
                    print('‚úÖ MoviePy Strategy 3 (v1.0.2): Success')
                    moviepy_success = True
                except Exception as e3:
                    print(f'‚ùå MoviePy Strategy 3 failed: {e3}')
        
        test_results.append(('MoviePy', moviepy_success, 'OK' if moviepy_success else 'Failed'))
        
        # Special handling for google.auth with namespace fixes
        print('\nüîç Testing Google Auth with namespace fixes...')
        google_success = False
        
        # Strategy 1: Direct import
        try:
            import google.auth
            import google_auth_oauthlib
            import googleapiclient.discovery
            print('‚úÖ Google Auth Strategy 1 (direct): Success')
            google_success = True
        except Exception as e:
            print(f'‚ùå Google Auth Strategy 1 failed: {e}')
            
            # Strategy 2: Clear namespace and reinstall
            try:
                print('üîß Google Auth Strategy 2: Namespace fix...')
                
                # Clear all google-related modules
                for mod in list(sys.modules.keys()):
                    if mod.startswith('google'):
                        del sys.modules[mod]
                
                # Reinstall google packages in correct order
                subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 
                              'google-auth', 'google-auth-oauthlib', 'google-api-python-client'], 
                             capture_output=True, check=False)
                
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 
                              'google-auth'], capture_output=True, check=True)
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 
                              'google-auth-oauthlib'], capture_output=True, check=True)
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 
                              'google-api-python-client'], capture_output=True, check=True)
                
                import google.auth
                print('‚úÖ Google Auth Strategy 2 (namespace fix): Success')
                google_success = True
            except Exception as e2:
                print(f'‚ùå Google Auth Strategy 2 failed: {e2}')
        
        test_results.append(('Google Auth', google_success, 'OK' if google_success else 'Failed'))
        
        # Special handling for OpenAI
        print('\nüîç Testing OpenAI with fallback strategies...')
        openai_success = False
        
        # Strategy 1: Direct import
        try:
            import openai
            print('‚úÖ OpenAI Strategy 1 (direct): Success')
            openai_success = True
        except Exception as e:
            print(f'‚ùå OpenAI Strategy 1 failed: {e}')
            
            # Strategy 2: Reinstall and retry
            try:
                print('üîß OpenAI Strategy 2: Reinstalling...')
                subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'openai'], 
                             capture_output=True, check=False)
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 
                              'openai==1.40.6'], capture_output=True, check=True)
                
                # Clear module cache
                for mod in list(sys.modules.keys()):
                    if 'openai' in mod:
                        del sys.modules[mod]
                
                import openai
                print('‚úÖ OpenAI Strategy 2 (reinstall): Success')
                openai_success = True
            except Exception as e2:
                print(f'‚ùå OpenAI Strategy 2 failed: {e2}')
        
        test_results.append(('OpenAI', openai_success, 'OK' if openai_success else 'Failed'))
        
        # Summary
        failed = [name for name, success, _ in test_results if not success]
        if failed:
            print(f'\n‚ùå Failed imports: {failed}')
            print('\n‚ö†Ô∏è Some packages failed to import. The script will attempt to continue...')
            print('\nDiagnostic information:')
            print('Available packages:')
            result = subprocess.run([sys.executable, '-m', 'pip', 'list'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if any(pkg in line.lower() for pkg in ['moviepy', 'google', 'openai']):
                        print(f'   {line}')
        else:
            print('\n‚úÖ All critical packages verified successfully!')
        "

    - name: Clear Python module cache
      run: |
        echo "üßπ Clearing Python module cache..."
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} +
        echo "‚úÖ Module cache cleared"

    - name: Create output directories
      run: |
        mkdir -p output
        mkdir -p logs
        echo "‚úÖ Output directories created"

    - name: Set up YouTube credentials
      env:
        YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
        YOUTUBE_TOKEN: ${{ secrets.YOUTUBE_TOKEN }}
      run: |
        echo "üîç Setting up YouTube credentials..."
        
        CRED_SET="${{ secrets.YOUTUBE_CREDENTIALS != '' }}"
        TOKEN_SET="${{ secrets.YOUTUBE_TOKEN != '' }}"
        
        echo "üìã Secret availability check:"
        echo "   - YOUTUBE_CREDENTIALS: $CRED_SET"
        echo "   - YOUTUBE_TOKEN: $TOKEN_SET"
        
        if [ -n "$YOUTUBE_CREDENTIALS" ] && [ "$YOUTUBE_CREDENTIALS" != "" ]; then
          echo "‚úÖ YOUTUBE_CREDENTIALS found via environment variable"
          echo "$YOUTUBE_CREDENTIALS" > credentials.json
        elif [ "${{ secrets.YOUTUBE_CREDENTIALS }}" != "" ]; then
          echo "‚úÖ YOUTUBE_CREDENTIALS found via direct secret"
          cat > credentials.json << 'EOL'
        ${{ secrets.YOUTUBE_CREDENTIALS }}
        EOL
        else
          echo "‚ùå YOUTUBE_CREDENTIALS not available through either method"
          echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
          exit 1
        fi
        
        if [ -f credentials.json ]; then
          FILE_SIZE=$(wc -c < credentials.json)
          echo "‚úÖ credentials.json created (size: $FILE_SIZE bytes)"
          
          if [ $FILE_SIZE -gt 10 ]; then
            if jq empty credentials.json > /dev/null 2>&1; then
              echo "‚úÖ credentials.json is valid JSON"
              
              if jq -e '.installed.type // .web.type // .type' credentials.json > /dev/null 2>&1; then
                echo "‚úÖ credentials.json contains required Google API fields"
                echo "YOUTUBE_CREDENTIALS_VALID=true" >> $GITHUB_ENV
              else
                echo "‚ùå credentials.json missing required Google API fields"
                echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
                exit 1
              fi
            else
              echo "‚ùå credentials.json is not valid JSON"
              echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
              exit 1
            fi
          else
            echo "‚ùå credentials.json file is too small (likely empty)"
            echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
            exit 1
          fi
        else
          echo "‚ùå credentials.json file was not created"
          echo "YOUTUBE_CREDENTIALS_VALID=false" >> $GITHUB_ENV
          exit 1
        fi
        
        if [ -n "$YOUTUBE_TOKEN" ] && [ "$YOUTUBE_TOKEN" != "" ]; then
          echo "$YOUTUBE_TOKEN" | base64 -d > token.pickle 2>/dev/null
          if [ -f token.pickle ] && [ -s token.pickle ]; then
            echo "‚úÖ YouTube token restored successfully (size: $(wc -c < token.pickle) bytes)"
            ls -l token.pickle
            file token.pickle
            echo "YOUTUBE_TOKEN_VALID=true" >> $GITHUB_ENV
          else
            echo "‚ùå YouTube token restoration failed"
            echo "üîç YOUTUBE_TOKEN content (first 100 chars): ${YOUTUBE_TOKEN:0:100}"
            echo "YOUTUBE_TOKEN_VALID=false" >> $GITHUB_ENV
            exit 1
          fi
        else
          echo "‚ùå No YOUTUBE_TOKEN secret found"
          echo "YOUTUBE_TOKEN_VALID=false" >> $GITHUB_ENV
          exit 1
        fi
        
        echo "‚úÖ YouTube credentials setup completed"

    - name: Set upload status
      run: |
        echo "üîß Determining upload status..."
        ENABLE_UPLOAD_VAR="${{ vars.ENABLE_UPLOAD || 'true' }}"
        echo "üìã Configuration check:"
        echo "   - YOUTUBE_CREDENTIALS_VALID: ${{ env.YOUTUBE_CREDENTIALS_VALID }}"
        echo "   - YOUTUBE_TOKEN_VALID: ${{ env.YOUTUBE_TOKEN_VALID }}"
        echo "   - ENABLE_UPLOAD variable: $ENABLE_UPLOAD_VAR"
        
        if [ "${{ env.YOUTUBE_CREDENTIALS_VALID }}" = "true" ] && [ "${{ env.YOUTUBE_TOKEN_VALID }}" = "true" ] && [ "$ENABLE_UPLOAD_VAR" = "true" ]; then
          echo "‚úÖ Upload will be enabled"
          echo "UPLOAD_TO_YOUTUBE=true" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è Upload will be disabled"
          echo "UPLOAD_TO_YOUTUBE=false" >> $GITHUB_ENV
        fi

    - name: Create environment file
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "‚ùå OPENAI_API_KEY is not set in repository secrets"
          exit 1
        fi
        
        cat > .env << EOF
        OPENAI_API_KEY=$OPENAI_API_KEY
        VIDEO_PRIVACY=$VIDEO_PRIVACY
        VIDEO_CATEGORY_ID=$VIDEO_CATEGORY_ID
        UPLOAD_TO_YOUTUBE=${{ env.UPLOAD_TO_YOUTUBE }}
        EOF
        
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" >> .env
          echo "DISCORD_NOTIFICATIONS_ENABLED=true" >> $GITHUB_ENV
        else
          echo "DISCORD_NOTIFICATIONS_ENABLED=false" >> $GITHUB_ENV
        fi
        
        if [ -n "${{ github.event.inputs.topic_override }}" ]; then
          echo "TOPIC_OVERRIDE=${{ github.event.inputs.topic_override }}" >> .env
        fi
        
        if [ -n "${{ github.event.inputs.category_override }}" ]; then
          echo "CATEGORY_OVERRIDE=${{ github.event.inputs.category_override }}" >> .env
        fi
        
        echo "‚úÖ Environment file created"

    - name: Run YouTube automation
      id: automation
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        UPLOAD_TO_YOUTUBE: ${{ env.UPLOAD_TO_YOUTUBE }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        TOPIC_OVERRIDE: ${{ github.event.inputs.topic_override }}
        CATEGORY_OVERRIDE: ${{ github.event.inputs.category_override }}
        PYTHONUNBUFFERED: "1"
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/utils
        PYTHONDONTWRITEBYTECODE: "1"
        PYTHONIOENCODING: "utf-8"
        HTTP_PROXY: ""
        HTTPS_PROXY: ""
        NO_PROXY: "*"
      run: |
        echo "üöÄ Starting YouTube automation..."
        echo "üìÖ Timestamp: $(date)"
        echo "üêç Python version: $(python --version)"
        echo "üìÅ Working directory: $(pwd)"
        echo "üìã Final configuration:"
        echo "   - YouTube credentials valid: ${{ env.YOUTUBE_CREDENTIALS_VALID }}"
        echo "   - YouTube token valid: ${{ env.YOUTUBE_TOKEN_VALID }}"
        echo "   - Upload enabled: ${{ env.UPLOAD_TO_YOUTUBE }}"
        echo "   - Video privacy: $VIDEO_PRIVACY"
        echo "üîç Environment variables (sensitive values masked):"
        python -c "
        import os
        for key, value in sorted(os.environ.items()):
            if key in ['OPENAI_API_KEY', 'YOUTUBE_CREDENTIALS', 'YOUTUBE_TOKEN', 'DISCORD_WEBHOOK_URL']:
                print(f'   - {key}: ***')
            else:
                print(f'   - {key}: {value}')
        "
        
        # Final check and potential fix before running main script
        python -c "
        import sys
        import subprocess
        
        print('üîß Final pre-execution checks...')
        
        # Clear and fix MoviePy
        for mod in list(sys.modules.keys()):
            if 'moviepy' in mod:
                del sys.modules[mod]
        
        try:
            import moviepy.editor
            print('‚úÖ MoviePy ready')
        except Exception as e:
            print(f'üîß Final MoviePy fix attempt... Error: {e}')
            subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'moviepy'], check=False)
            subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'moviepy==1.0.2'], check=False)
            try:
                import moviepy.editor
                print('‚úÖ MoviePy installed successfully')
            except Exception as e2:
                print(f'‚ùå MoviePy installation failed: {e2}')
        
        # Clear and fix Google Auth
        for mod in list(sys.modules.keys()):
            if mod.startswith('google'):
                del sys.modules[mod]
        
        try:
            import google.auth
            print('‚úÖ Google Auth ready')
        except Exception as e:
            print(f'üîß Final Google Auth fix attempt... Error: {e}')
            subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'google-auth', 'google-auth-oauthlib', 'google-api-python-client'], check=False)
            subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'google-auth', 'google-auth-oauthlib', 'google-api-python-client'], check=False)
            try:
                import google.auth
                print('‚úÖ Google Auth installed successfully')
            except Exception as e2:
                print(f'‚ùå Google Auth installation failed: {e2}')
        
        # Clear and fix OpenAI
        for mod in list(sys.modules.keys()):
            if 'openai' in mod:
                del sys.modules[mod]
        
        try:
            import openai
            print('‚úÖ OpenAI ready')
        except Exception as e:
            print(f'üîß Final OpenAI fix attempt... Error: {e}')
            subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'openai'], check=False)
            subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'openai==1.40.6'], check=False)
            try:
                import openai
                print('‚úÖ OpenAI installed successfully')
            except Exception as e2:
                print(f'‚ùå OpenAI installation failed: {e2}')
        
        print('üöÄ Ready to execute main script')
        "
        
        set -o pipefail
        python main.py 2>&1 | tee automation.log
        EXIT_CODE=$PIPESTATUS[0]
        
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "‚ùå Automation failed with exit code $EXIT_CODE"
          echo "üìã Last 20 lines of output:"
          tail -20 automation.log || echo "Could not read log file"
          exit $EXIT_CODE
        fi
        
        echo "‚úÖ Automation completed successfully"

    - name: Debug environment on failure
      if: failure()
      run: |
        echo "üîç Debugging environment..."
        pip list
        python -m site
        echo "‚úÖ Environment debug info collected"

    - name: Save updated YouTube token
      if: always() && env.YOUTUBE_CREDENTIALS_VALID == 'true'
      id: save_token
      run: |
        if [ -f token.pickle ]; then
          base64 -w 0 token.pickle > token_updated.txt
          echo "token_content=$(cat token_updated.txt)" >> $GITHUB_OUTPUT
          echo "‚úÖ Updated token prepared for storage"
        else
          echo "‚ÑπÔ∏è No token.pickle file found to save"
        fi

    - name: Upload artifacts on failure or partial success
      if: failure() || steps.automation.outputs.exit_code == '2'
      uses: actions/upload-artifact@v4
      with:
        name: automation-failure-logs-${{ github.run_number }}
        path: |
          automation.log
          output/
          logs/
          *.json
          *.txt
          *.env
        retention-days: 7

    - name: Upload successful artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: automation-success-${{ github.run_number }}
        path: |
          output/
          logs/
          automation.log
        retention-days: 3

    - name: Extract video information
      if: success()
      id: video_info
      run: |
        VIDEO_TITLE=$(grep -E "^‚úÖ Topic:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        VIDEO_ID=$(grep "Video uploaded with ID:" automation.log | tail -1 | awk '{print $NF}' 2>/dev/null || echo "")
        VIDEO_CATEGORY=$(grep -E "^‚úÖ Category:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        
        VIDEO_TITLE=$(echo "$VIDEO_TITLE" | sed 's/[^a-zA-Z0-9 .,!?-]//g' | head -c 100)
        VIDEO_ID=$(echo "$VIDEO_ID" | grep -E '^[a-zA-Z0-9_-]{11}$' || echo "")
        
        echo "video_title=$VIDEO_TITLE" >> $GITHUB_OUTPUT