name: YouTube Automation

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9:00 AM UTC
  workflow_dispatch:
    inputs:
      topic_override:
        description: 'Override today''s topic (optional)'
        required: false
        type: string
      category_override:
        description: 'Override category (optional)'
        required: false
        type: string

jobs:
  create-and-upload-video:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg espeak espeak-data libespeak1 libespeak-dev
        sudo apt-get install -y python3-dev python3-pip python3-venv
        sudo apt-get install -y libffi-dev libssl-dev libxml2-dev libxslt-dev
        sudo apt-get install -y build-essential
        ffmpeg -version
        echo "✅ System dependencies installed"

    - name: Upgrade pip and setuptools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "✅ Pip upgraded"

    - name: Install Python dependencies from requirements.txt
      run: |
        # Use requirements.txt for better dependency management
        python -m pip install --no-cache-dir -r requirements.txt
        echo "✅ Requirements installed from requirements.txt"

    - name: Verify critical installations
      run: |
        echo "🔍 Verifying installations..."
        
        # Test core packages
        python -c "import numpy; print(f'✅ NumPy {numpy.__version__}')"
        python -c "import PIL; print(f'✅ Pillow {PIL.__version__}')"
        python -c "import openai; print(f'✅ OpenAI {openai.__version__}')"
        python -c "import gtts; print(f'✅ gTTS {gtts.__version__}')" 
        
        # Test Google Auth packages
        python -c "import google.auth; print('✅ google-auth imported')"
        python -c "import google_auth_oauthlib; print('✅ google-auth-oauthlib imported')"
        python -c "import googleapiclient; print('✅ google-api-python-client imported')"
        
        # Test MoviePy with better error handling
        python -c "
        try:
            import moviepy
            print(f'✅ MoviePy {moviepy.__version__}')
            from moviepy.editor import VideoFileClip, AudioFileClip, CompositeVideoClip, TextClip
            print('✅ MoviePy editor components imported')
        except Exception as e:
            print(f'❌ MoviePy error: {e}')
            exit(1)
        "
        
        echo "✅ All critical packages verified"

    - name: Create output directory
      run: mkdir -p output

    - name: Set up YouTube credentials
      env:
        YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
        YOUTUBE_TOKEN: ${{ secrets.YOUTUBE_TOKEN }}
      run: |
        if [ -z "$YOUTUBE_CREDENTIALS" ]; then
          echo "⚠️ YOUTUBE_CREDENTIALS not set - upload will be disabled"
        else
          echo "$YOUTUBE_CREDENTIALS" > credentials.json
          echo "✅ YouTube credentials.json created"
        fi
        
        if [ ! -z "$YOUTUBE_TOKEN" ]; then
          echo "$YOUTUBE_TOKEN" | base64 -d > token.pickle
          echo "✅ YouTube token restored"
        fi

    - name: Create environment file
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        ENABLE_UPLOAD: ${{ vars.ENABLE_UPLOAD || 'true' }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        # Validate required secrets
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ OPENAI_API_KEY is not set"
          exit 1
        fi
        
        # Create .env file
        cat > .env << EOF
        OPENAI_API_KEY=$OPENAI_API_KEY
        VIDEO_PRIVACY=$VIDEO_PRIVACY
        VIDEO_CATEGORY_ID=$VIDEO_CATEGORY_ID
        ENABLE_UPLOAD=$ENABLE_UPLOAD
        UPLOAD_TO_YOUTUBE=$ENABLE_UPLOAD
        EOF
        
        # Add Discord webhook if provided
        if [ ! -z "$DISCORD_WEBHOOK_URL" ]; then
          echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" >> .env
        fi
        
        # Add overrides if provided
        if [ ! -z "${{ github.event.inputs.topic_override }}" ]; then
          echo "TOPIC_OVERRIDE=${{ github.event.inputs.topic_override }}" >> .env
        fi
        if [ ! -z "${{ github.event.inputs.category_override }}" ]; then
          echo "CATEGORY_OVERRIDE=${{ github.event.inputs.category_override }}" >> .env
        fi
        
        # Debug: Show environment file (hide sensitive values)
        echo "✅ Environment file created:"
        sed 's/\(.*API_KEY=\).*/\1[HIDDEN]/' .env
        sed 's/\(.*WEBHOOK_URL=\).*/\1[HIDDEN]/' .env

    - name: Run YouTube automation
      id: automation
      run: |
        echo "🚀 Starting YouTube automation..."
        python main.py 2>&1 | tee automation.log
        
        # Capture exit code
        EXIT_CODE=${PIPESTATUS[0]}
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "❌ Automation failed with code $EXIT_CODE"
          exit $EXIT_CODE
        fi

    - name: Save updated token
      if: always()
      run: |
        if [ -f token.pickle ]; then
          base64 -w 0 token.pickle > token_updated.txt
          echo "✅ Updated token prepared for storage"
        fi

    - name: Upload artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: automation-logs-${{ github.run_number }}
        path: |
          automation.log
          output/
          *.json
          *.txt
        retention-days: 7

    - name: Send success notification
      if: success() && env.DISCORD_WEBHOOK_URL != ''
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        # Extract video information from logs
        VIDEO_TITLE=$(grep -E "^✅ Topic:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
        VIDEO_ID=$(grep "Video uploaded with ID:" automation.log | tail -1 | awk '{print $NF}' 2>/dev/null || echo "")
        
        if [ ! -z "$VIDEO_ID" ] && [ "$VIDEO_ID" != "" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"embeds\": [{
                   \"title\": \"✅ YouTube Video Published Successfully!\",
                   \"description\": \"**Title:** $VIDEO_TITLE\\n**Video ID:** $VIDEO_ID\\n**URL:** https://www.youtube.com/watch?v=$VIDEO_ID\\n**Shorts:** https://youtube.com/shorts/$VIDEO_ID\",
                   \"color\": 5763719,
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
                 }]
               }" \
               "$DISCORD_WEBHOOK_URL" || echo "Failed to send Discord notification"
        else
          echo "⚠️ Could not extract video ID for notification"
        fi

    - name: Send failure notification  
      if: failure() && env.DISCORD_WEBHOOK_URL != ''
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        ERROR_MSG=$(tail -10 automation.log 2>/dev/null | tr '\n' ' ' | sed 's/"/\\"/g' | head -c 500 || echo "Unknown error - check logs")
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "{
               \"embeds\": [{
                 \"title\": \"❌ YouTube Automation Failed\",
                 \"description\": \"**Error:** $ERROR_MSG\\n**Run:** ${{ github.run_number }}\\n**Workflow:** ${{ github.workflow }}\\n**Branch:** ${{ github.ref_name }}\",
                 \"color\": 15158332,
                 \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
               }]
             }" \
             "$DISCORD_WEBHOOK_URL" || echo "Failed to send Discord notification"

  cleanup:
    runs-on: ubuntu-latest
    needs: create-and-upload-video
    if: always()
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            // Keep only the 5 most recent artifacts
            const oldArtifacts = artifacts.artifacts
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5);
            
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
          } catch (error) {
            console.log(`Cleanup failed: ${error.message}`);
          }
            