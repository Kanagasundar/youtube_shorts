name: YouTube Automation

on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      topic_override:
        description: 'Override today''s topic (optional)'
        required: false
        type: string
      category_override:
        description: 'Override category (optional)'
        required: false
        type: string

jobs:
  create-and-upload-video:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      ACTIONS_RUNNER_DEBUG: true
      NODE_OPTIONS: "--max-old-space-size=8192"
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/utils
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONIOENCODING: "utf-8"
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: "*"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache apt-get packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/scheduler.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade pip
        run: |
          echo "üîç Upgrading pip..."
          pip install --upgrade pip==25.1.1
          echo "‚úÖ pip upgraded to $(pip --version)"

      - name: Clear Python cache
        run: |
          echo "üßπ Clearing Python cache..."
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} +
          echo "‚úÖ Python cache cleared"

      - name: Verify main.py integrity
        run: |
          echo "üîç Verifying main.py syntax..."
          if grep -q "print(project_id=" main.py; then
            echo "‚ùå Invalid print statement with project_id found in main.py"
            exit 1
          fi
          python -m py_compile main.py || {
            echo "‚ùå Syntax error in main.py"
            exit 1
          }
          echo "‚úÖ main.py syntax verified"

      - name: Install system dependencies
        run: |
          echo "üîç Installing system dependencies..."
          start_time=$(date +%s)
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ffmpeg \
            libopencv-dev python3-opencv \
            texlive texlive-latex-extra texlive-fonts-extra \
            imagemagick \
            fonts-freefont-ttf fonts-liberation fonts-dejavu \
            python3-dev python3-pip python3-venv \
            libffi-dev libssl-dev libxml2-dev libxslt-dev \
            libasound2-dev portaudio19-dev \
            libcairo2-dev libpango1.0-dev \
            jq libxml2-utils \
            espeak
          sudo fc-cache -fv
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "‚úÖ System dependencies installed in $duration seconds"
          
          if ! convert -version; then
            echo "‚ùå ImageMagick not installed correctly"
            exit 1
          fi
          echo "üîç ImageMagick version:"
          convert -version
          
          if ! ffmpeg -version; then
            echo "‚ùå FFmpeg not installed correctly"
            exit 1
          fi
          echo "üîç FFmpeg version:"
          ffmpeg -version
          
          echo "üîç Available fonts:"
          fc-list | grep -i "FreeSerif\|FreeSans\|LiberationSans\|DejaVu" || echo "‚ö†Ô∏è No FreeSerif, FreeSans, LiberationSans, or DejaVu fonts found"
          if fc-list | grep -qi "FreeSerif"; then
            echo "‚úÖ FreeSerif font found"
          else
            echo "‚ö†Ô∏è FreeSerif font not found"
          fi
          
          POLICY_FILE="/etc/ImageMagick-6/policy.xml"
          echo "üîç Configuring ImageMagick policy at $POLICY_FILE"
          
          if [ -f "$POLICY_FILE" ]; then
            sudo cp "$POLICY_FILE" "$POLICY_FILE.backup"
            echo "‚úÖ Original policy backed up"
          fi
          
          sudo tee "$POLICY_FILE" > /dev/null << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <policymap>
            <policy domain="path" rights="read|write" pattern="@*" />
            <policy domain="coder" rights="read|write" pattern="*" />
            <policy domain="delegate" rights="read|write" pattern="*" />
            <policy domain="filter" rights="read|write" pattern="*" />
            <policy domain="path" rights="read|write" pattern="/usr/share/fonts/*" />
            <policy domain="path" rights="read|write" pattern="/usr/local/share/fonts/*" />
            <policy domain="system" name="memory" value="1024MiB" />
            <policy domain="system" name="disk" value="2GiB" />
            <policy domain="system" name="thread" value="4" />
            <policy domain="system" name="time" value="180" />
            <policy domain="path" rights="none" pattern="/etc/*" />
            <policy domain="path" rights="none" pattern="/usr/bin/*" />
            <policy domain="path" rights="none" pattern="/usr/local/bin/*" />
            <policy domain="path" rights="none" pattern="/bin/*" />
            <policy domain="path" rights="none" pattern="/sbin/*" />
          </policymap>
          EOF
          
          sudo chmod 644 "$POLICY_FILE"
          sudo chown root:root "$POLICY_FILE"
          
          echo "‚úÖ ImageMagick policy configured at $POLICY_FILE"
          echo "üîç ImageMagick policy file contents:"
          cat "$POLICY_FILE"
          
          if ! xmllint --noout "$POLICY_FILE" 2>/dev/null; then
            echo "‚ùå ImageMagick policy XML is invalid"
            cat "$POLICY_FILE"
            exit 1
          fi
          echo "‚úÖ ImageMagick policy XML is valid"
          
          echo "Test Label" > test_label.txt
          if convert -size 200x50 xc:white -font FreeSerif -pointsize 16 -fill black -gravity center -annotate +0+0 "Test" test_basic.png; then
            echo "‚úÖ Basic ImageMagick text rendering with FreeSerif works"
          else
            echo "‚ö†Ô∏è Basic ImageMagick text rendering with FreeSerif failed"
            exit 1
          fi
          
          if convert -size 200x50 xc:white -font FreeSerif -pointsize 16 -fill black -gravity center -annotate +0+0 @test_label.txt test_at_syntax.png 2> imagemagick_test_error.log; then
            echo "‚úÖ ImageMagick @ syntax test with FreeSerif passed"
          else
            echo "‚ùå ImageMagick @ syntax test failed"
            cat imagemagick_test_error.log
            exit 1
          fi
          
          rm -f test_label.txt test_basic.png test_at_syntax.png imagemagick_test_error.log
          echo "‚úÖ All ImageMagick tests passed"

      - name: Install Python dependencies
        run: |
          echo "üì¶ Installing Python dependencies..."
          start_time=$(date +%s)
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir opencv-python==4.10.0.84 numpy==1.26.4
          pip install --no-cache-dir moviepy==1.0.3
          pip install --no-cache-dir nltk==3.9.1
          pip install --no-cache-dir Pillow==10.4.0
          pip install --no-cache-dir gtts==2.5.3
          pip install --no-cache-dir requests==2.31.0
          pip install --no-cache-dir torch==2.4.0 torchaudio==2.4.0
          pip install --no-cache-dir tts==0.22.0
          pip install --no-cache-dir transformers==4.44.2
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "‚úÖ Python dependencies installed in $duration seconds"
          pip list

      - name: Download Mozilla TTS model
        run: |
          echo "üì• Downloading Mozilla TTS model..."
          python -c "from TTS.api import TTS; TTS(model_name='tts_models/en/ljspeech/tacotron2-DDC')" 2> tts_model_download.log || {
            echo "‚ö†Ô∏è Mozilla TTS model download failed, will use gTTS fallback"
            cat tts_model_download.log
          }
          echo "‚úÖ Mozilla TTS model download completed or fallback configured"

      - name: Download NLTK data
        run: |
          echo "üì• Downloading NLTK data..."
          for attempt in {1..5}; do
            python -c "import nltk; nltk.download('punkt', download_dir='/home/runner/nltk_data'); nltk.download('punkt_tab', download_dir='/home/runner/nltk_data'); nltk.download('averaged_perceptron_tagger', download_dir='/home/runner/nltk_data'); nltk.download('averaged_perceptron_tagger_eng', download_dir='/home/runner/nltk_data')" && break
            echo "‚ö†Ô∏è NLTK data download attempt $attempt failed, retrying after 5 seconds..."
            sleep 5
          done || {
            echo "‚ùå NLTK data download failed after 5 attempts"
            exit 1
          }
          echo "‚úÖ NLTK data downloaded and verified"

      - name: Fix namespace packages and verify installations
        run: |
          echo "üîß Fixing namespace packages and performing comprehensive verification..."
          python -c "
          import sys
          import subprocess
          import importlib
          import os
          print('üêç Python version:', sys.version)
          print('üîç Python executable:', sys.executable)
          print('üìÅ Python path:')
          for path in sys.path:
              print(f'   {path}')
          
          print('\nüîß Fixing Google namespace packages...')
          site_packages_dirs = []
          for path in sys.path:
              if path and 'site-packages' in path and os.path.exists(path):
                  site_packages_dirs.append(path)
          print(f'Found site-packages directories: {site_packages_dirs}')
          
          google_packages = []
          for site_dir in site_packages_dirs:
              try:
                  packages = [pkg for pkg in os.listdir(site_dir) if pkg.startswith('google') and os.path.isdir(os.path.join(site_dir, pkg))]
                  google_packages.extend(packages)
              except (OSError, PermissionError) as e:
                  print(f'Could not list {site_dir}: {e}')
          print(f'Found Google packages: {list(set(google_packages))}')
          
          import shutil
          for site_packages in site_packages_dirs:
              gridfs_dir = os.path.join(site_packages, 'gridfs')
              if os.path.exists(gridfs_dir):
                  pycache_dir = os.path.join(gridfs_dir, '__pycache__')
                  if os.path.exists(pycache_dir):
                      try:
                          shutil.rmtree(pycache_dir)
                          print(f'‚úÖ Removed {pycache_dir}')
                      except Exception as e:
                          print(f'‚ö†Ô∏è Could not remove {pycache_dir}: {e}')
          
          test_results = []
          
          def test_import_advanced(module_name, import_statement, display_name=None, critical=True):
              if display_name is None:
                  display_name = module_name
              try:
                  if module_name in sys.modules:
                      del sys.modules[module_name]
                  if module_name == 'moviepy':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'moviepy' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name.startswith('google'):
                      modules_to_clear = [mod for mod in sys.modules.keys() if mod.startswith('google')]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'openai':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'openai' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'replicate':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'replicate' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'cv2':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'cv2' in mod or 'opencv' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'nltk':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'nltk' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'TTS':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'TTS' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'transformers':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'transformers' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  
                  exec(import_statement)
                  
                  if module_name == 'cv2':
                      import cv2
                      if not hasattr(cv2, 'imread') or not hasattr(cv2, 'cvtColor'):
                          raise AttributeError('OpenCV missing critical attributes (imread, cvtColor)')
                  elif module_name == 'TTS':
                      from TTS.api import TTS
                      if not hasattr(TTS, 'tts_to_file'):
                          raise AttributeError('Mozilla TTS missing critical method (tts_to_file)')
                  elif module_name == 'transformers':
                      from transformers import pipeline
                      generator = pipeline('text-generation', model='distilgpt2')
                      if not generator:
                          raise AttributeError('Transformers pipeline initialization failed')
                  
                  print(f'‚úÖ {display_name}: Import successful')
                  test_results.append((display_name, True, 'OK'))
                  return True
              except Exception as e:
                  print(f'‚ùå {display_name}: {str(e)}')
                  test_results.append((display_name, False, str(e)))
                  if module_name == 'cv2' and 'cv2.gapi.wip.draw' in str(e):
                      try:
                          import cv2
                          if hasattr(cv2, 'imread') and hasattr(cv2, 'cvtColor'):
                              print(f'‚úÖ {display_name}: Functional despite G-API error')
                              test_results.append((display_name, True, 'OK despite G-API error'))
                              return True
                          else:
                              print(f'‚ùå {display_name}: Missing critical attributes after G-API error')
                      except Exception as e2:
                          print(f'‚ùå {display_name}: Verification failed: {e2}')
                  if not critical:
                      print(f'‚ö†Ô∏è {display_name} failed but is non-critical, continuing...')
                      return False
                  return False
          
          print('\nüîç Testing imports with advanced verification...')
          test_import_advanced('numpy', 'import numpy')
          test_import_advanced('PIL', 'from PIL import Image')
          test_import_advanced('openai', 'import openai')
          test_import_advanced('gtts', 'from gtts import gTTS')
          test_import_advanced('pydub', 'from pydub import AudioSegment')
          test_import_advanced('requests', 'import requests')
          test_import_advanced('replicate', 'import replicate')
          test_import_advanced('cv2', 'import cv2', 'OpenCV')
          test_import_advanced('nltk', 'import nltk')
          test_import_advanced('TTS', 'from TTS.api import TTS', 'Mozilla TTS', critical=False)
          test_import_advanced('transformers', 'from transformers import pipeline', 'Transformers', critical=False)
          
          print('\nüé¨ Testing MoviePy...')
          moviepy_success = False
          try:
              import moviepy
              import moviepy.editor as mpe
              print('‚úÖ MoviePy Strategy 1 (direct): Success')
              moviepy_success = True
          except Exception as e:
              print(f'‚ùå MoviePy Strategy 1 failed: {e}')
              try:
                  print('üîß MoviePy Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'moviepy'], check=False)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'moviepy==1.0.3'], check=True)
                  for mod in list(sys.modules.keys()):
                      if 'moviepy' in mod:
                          del sys.modules[mod]
                  import moviepy.editor as mpe
                  print('‚úÖ MoviePy Strategy 2 (reinstall): Success')
                  moviepy_success = True
              except Exception as e2:
                  print(f'‚ùå MoviePy Strategy 2 failed: {e2}')
          test_results.append(('MoviePy', moviepy_success, 'OK' if moviepy_success else 'Failed'))
          
          print('\nüîç Testing Google Auth...')
          google_success = False
          try:
              import google.auth
              import google_auth_oauthlib
              import googleapiclient.discovery
              print('‚úÖ Google Auth Strategy 1 (direct): Success')
              google_success = True
          except Exception as e:
              print(f'‚ùå Google Auth Strategy 1 failed: {e}')
              try:
                  print('üîß Google Auth Strategy 2: Namespace fix...')
                  for mod in list(sys.modules.keys()):
                      if mod.startswith('google'):
                          del sys.modules[mod]
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'google-auth', 'google-auth-oauthlib', 'google-api-python-client'], check=True)
                  import google.auth
                  print('‚úÖ Google Auth Strategy 2 (namespace fix): Success')
                  google_success = True
              except Exception as e2:
                  print(f'‚ùå Google Auth Strategy 2 failed: {e2}')
          test_results.append(('Google Auth', google_success, 'OK' if google_success else 'Failed'))
          
          print('\nüîç Testing OpenAI...')
          openai_success = False
          try:
              import openai
              print('‚úÖ OpenAI Strategy 1 (direct): Success')
              openai_success = True
          except Exception as e:
              print(f'‚ùå OpenAI Strategy 1 failed: {e}')
              try:
                  print('üîß OpenAI Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'openai==1.93.0'], check=True)
                  for mod in list(sys.modules.keys()):
                      if 'openai' in mod:
                          del sys.modules[mod]
                  import openai
                  print('‚úÖ OpenAI Strategy 2 (reinstall): Success')
                  openai_success = True
              except Exception as e2:
                  print(f'‚ùå OpenAI Strategy 2 failed: {e2}')
          test_results.append(('OpenAI', openai_success, 'OK' if openai_success else 'Failed'))
          
          print('\nüîç Testing Replicate...')
          replicate_success = False
          try:
              import replicate
              print('‚úÖ Replicate Strategy 1 (direct): Success')
              replicate_success = True
          except Exception as e:
              print(f'‚ùå Replicate Strategy 1 failed: {e}')
              try:
                  print('üîß Replicate Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'replicate'], check=True)
                  for mod in list(sys.modules.keys()):
                      if 'replicate' in mod:
                          del sys.modules[mod]
                  import replicate
                  print('‚úÖ Replicate Strategy 2 (reinstall): Success')
                  replicate_success = True
              except Exception as e2:
                  print(f'‚ùå Replicate Strategy 2 failed: {e2}')
          test_results.append(('Replicate', replicate_success, 'OK' if replicate_success else 'Failed'))
          
          print('\nüîç Testing OpenCV...')
          opencv_success = False
          try:
              import cv2
              print(f'‚úÖ OpenCV Strategy 1 (direct): Success (version: {cv2.__version__})')
              opencv_success = True
          except Exception as e:
              print(f'‚ùå OpenCV Strategy 1 failed: {e}')
              try:
                  print('üîß OpenCV Strategy 2: Installing 4.10.0.84...')
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'opencv-python==4.10.0.84', 'numpy==1.26.4'], check=True)
                  for mod in list(sys.modules.keys()):
                      if 'cv2' in mod or 'opencv' in mod:
                          del sys.modules[mod]
                  import cv2
                  print(f'‚úÖ OpenCV Strategy 2 (4.10.0.84): Success (version: {cv2.__version__})')
                  opencv_success = True
              except Exception as e2:
                  print(f'‚ùå OpenCV Strategy 2 failed: {e2}')
          test_results.append(('OpenCV', opencv_success, 'OK' if opencv_success else 'Failed'))
          
          print('\nüîç Testing NLTK...')
          nltk_success = False
          try:
              import nltk
              print(f'‚úÖ NLTK Strategy 1 (direct): Success (version: {nltk.__version__})')
              nltk_success = True
          except Exception as e:
              print(f'‚ùå NLTK Strategy 1 failed: {e}')
              try:
                  print('üîß NLTK Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'nltk==3.9.1'], check=True)
                  for mod in list(sys.modules.keys()):
                      if 'nltk' in mod:
                          del sys.modules[mod]
                  import nltk
                  print(f'‚úÖ NLTK Strategy 2 (reinstall): Success (version: {nltk.__version__})')
                  nltk_success = True
              except Exception as e2:
                  print(f'‚ùå NLTK Strategy 2 failed: {e2}')
          test_results.append(('NLTK', nltk_success, 'OK' if nltk_success else 'Failed'))
          
          print('\nüìä FINAL VERIFICATION SUMMARY:')
          print('=' * 50)
          for name, success, status in test_results:
              status_icon = '‚úÖ' if success else '‚ùå'
              print(f'{status_icon} {name}: {status}')
          
          critical_failures = [name for name, success, _ in test_results if not success and name not in ['Mozilla TTS', 'Transformers']]
          if critical_failures:
              print(f'‚ùå Critical packages failed to import: {critical_failures}')
              sys.exit(1)
          else:
              print('üéâ All critical packages imported successfully!')
              if not all(success for _, success, _ in test_results):
                  print('‚ö†Ô∏è Some non-critical packages (Mozilla TTS, Transformers) failed, but continuing with gTTS fallback...')
          "

      - name: Create output directories
        run: |
          mkdir -p output
          mkdir -p logs
          echo "‚úÖ Output directories created"

      - name: Set up YouTube credentials
        env:
          YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
          YOUTUBE_TOKEN: ${{ secrets.YOUTUBE_TOKEN }}
        run: |
          echo "üîç Setting up YouTube credentials..."
          if [ -n "$YOUTUBE_CREDENTIALS" ]; then
            echo "$YOUTUBE_CREDENTIALS" > credentials.json
            echo "‚úÖ YouTube OAuth 2.0 credentials restored"
          else
            echo "‚ùå YOUTUBE_CREDENTIALS not provided"
            exit 1
          fi
          if [ -n "$YOUTUBE_TOKEN" ]; then
            echo "$YOUTUBE_TOKEN" | base64 -d > token.pickle
            echo "‚úÖ YouTube OAuth 2.0 token restored"
          else
            echo "‚ùå YOUTUBE_TOKEN not provided"
            exit 1
          fi

      - name: Create environment file
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          REPLICATE_API_KEY: ${{ secrets.REPLICATE_API_KEY }}
          VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
          VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ùå OPENAI_API_KEY is not set"
            exit 1
          fi
          if [ -z "$PEXELS_API_KEY" ]; then
            echo "‚ùå PEXELS_API_KEY is not set"
            exit 1
          fi
          cat > .env << EOF
          OPENAI_API_KEY=$OPENAI_API_KEY
          PEXELS_API_KEY=$PEXELS_API_KEY
          REPLICATE_API_KEY=$REPLICATE_API_KEY
          VIDEO_PRIVACY=$VIDEO_PRIVACY
          VIDEO_CATEGORY_ID=$VIDEO_CATEGORY_ID
          UPLOAD_TO_YOUTUBE=true
          EOF
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" >> .env
            echo "DISCORD_NOTIFICATIONS_ENABLED=true" >> $GITHUB_ENV
          else
            echo "DISCORD_NOTIFICATIONS_ENABLED=false" >> $GITHUB_ENV
          fi
          if [ -n "${{ github.event.inputs.topic_override }}" ]; then
            echo "TOPIC_OVERRIDE=${{ github.event.inputs.topic_override }}" >> .env
          fi
          if [ -n "${{ github.event.inputs.category_override }}" ]; then
            echo "CATEGORY_OVERRIDE=${{ github.event.inputs.category_override }}" >> .env
          fi
          echo "‚úÖ Environment file created"

      - name: Check disk space and memory
        run: |
          echo "üîç Checking disk space..."
          df -h
          echo "üîç Checking memory..."
          free -m
          echo "üîç Checking CPU usage..."
          top -bn1 | head -n 10

      - name: Run YouTube automation
        id: automation
        run: |
          echo "üöÄ Starting YouTube automation..."
          python main.py 2>&1 | tee automation.log
          EXIT_CODE=$PIPESTATUS[0]
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ùå Automation failed with exit code $EXIT_CODE"
            tail -20 automation.log
            exit $EXIT_CODE
          fi
          echo "‚úÖ Automation completed successfully"

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: automation-failure-logs-${{ github.run_number }}
          path: |
            automation.log
            output/
            logs/
            *.json
            *.txt
            *.env
          retention-days: 7

      - name: Notify Discord on failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            echo "üì¢ Sending Discord notification..."
            ERROR_MESSAGE=$(tail -n 50 automation.log | jq -Rs .)
            curl -H "Content-Type: application/json" -X POST \
              -d "{\"content\": \"‚ùå YouTube Automation failed on $(date -u). Last 50 lines of log:\n\`\`\`$ERROR_MESSAGE\`\`\`\"}" \
              "$DISCORD_WEBHOOK_URL" || echo "‚ö†Ô∏è Discord notification failed"
          else
            echo "‚ÑπÔ∏è No Discord webhook configured, skipping notification"
          fi