name: YouTube Automation

on:
  schedule:
    - cron: '0 4 * * *'  # Daily at 4:00 AM UTC
  workflow_dispatch:
    inputs:
      topic_override:
        description: 'Override today''s topic (optional)'
        required: false
        type: string
      category_override:
        description: 'Override category (optional)'
        required: false
        type: string

jobs:
  create-and-upload-video:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      ACTIONS_RUNNER_DEBUG: true
      NODE_OPTIONS: "--max-old-space-size=8192"
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/utils
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONIOENCODING: "utf-8"
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: "*"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache apt-get packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/scheduler.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade pip
        run: |
          echo "üîç Upgrading pip..."
          pip install --upgrade pip==25.1.1
          echo "‚úÖ pip upgraded to $(pip --version)"

      - name: Clear Python cache
        run: |
          echo "üßπ Clearing Python cache..."
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} +
          echo "‚úÖ Python cache cleared"

      - name: Verify main.py integrity
        run: |
          echo "üîç Verifying main.py syntax..."
          if grep -q "print(project_id=" main.py; then
            echo "‚ùå Invalid print statement with project_id found in main.py"
            exit 1
          fi
          python -m py_compile main.py || {
            echo "‚ùå Syntax error in main.py"
            exit 1
          }
          echo "‚úÖ main.py syntax verified"

      - name: Install system dependencies
        run: |
          echo "üîç Installing system dependencies..."
          start_time=$(date +%s)
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ffmpeg \
            libopencv-dev python3-opencv \
            texlive texlive-latex-extra texlive-fonts-extra \
            imagemagick \
            fonts-freefont-ttf fonts-liberation fonts-dejavu \
            python3-dev python3-pip python3-venv \
            libffi-dev libssl-dev libxml2-dev libxslt-dev \
            libasound2-dev portaudio19-dev \
            libcairo2-dev libpango1.0-dev \
            jq
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "‚úÖ System dependencies installed in $duration seconds"
          convert -version || { echo "‚ùå ImageMagick not installed correctly"; exit 1; }
          echo "üîç ImageMagick version:"
          convert -version
          ffmpeg -version || { echo "‚ùå FFmpeg not installed correctly"; exit 1; }
          echo "üîç FFmpeg version:"
          ffmpeg -version
          # Configure ImageMagick policy
          POLICY_FILE="/etc/ImageMagick-6/policy.xml"
          sudo bash -c "cat > $POLICY_FILE << 'EOF'
          <?xml version=\"1.0\" encoding=\"UTF-8\"?>
          <policymap>
          <policy domain=\"path\" rights=\"read|write\" pattern=\"@*\"/>
          <policy domain=\"coder\" rights=\"read|write\" pattern=\"*\"/>
          <policy domain=\"delegate\" rights=\"read|write\" pattern=\"*\"/>
          <policy domain=\"filter\" rights=\"read|write\" pattern=\"*\"/>
          <policy domain=\"system\" name=\"memory\" value=\"512MiB\"/>
          <policy domain=\"system\" name=\"disk\" value=\"1GiB\"/>
          <policy domain=\"system\" name=\"thread\" value=\"2\"/>
          <policy domain=\"system\" name=\"font\" value=\"read|write\"/>
          </policymap>
          EOF"
          sudo chmod 644 "$POLICY_FILE"
          echo "‚úÖ ImageMagick policy configured at $POLICY_FILE"
          echo "üîç ImageMagick policy file contents:"
          cat "$POLICY_FILE" || { echo "‚ùå Failed to read $POLICY_FILE"; exit 1; }
          if grep -q 'domain="path"' "$POLICY_FILE" && grep -q 'rights="read|write"' "$POLICY_FILE" && grep -q 'pattern="@*"' "$POLICY_FILE"; then
            echo "‚úÖ ImageMagick policy verified for path read|write"
          else
            echo "‚ùå ImageMagick policy verification failed"
            cat "$POLICY_FILE"
            exit 1
          fi
          echo "Test" > test.txt
          convert label:@test.txt -font DejaVu-Sans test.png 2> imagemagick_test_error.log || {
            echo "‚ùå ImageMagick text rendering test failed"
            echo "üîç ImageMagick test error output:"
            cat imagemagick_test_error.log
            exit 1
          }
          echo "‚úÖ ImageMagick text rendering test passed"

      - name: Verify system dependencies
        run: |
          echo "üîç Verifying system dependencies..."
          ffmpeg -version || { echo "‚ùå FFmpeg not installed correctly"; exit 1; }
          convert -version || { echo "‚ùå ImageMagick not installed correctly"; exit 1; }
          python -c "import cv2; print('OpenCV version:', cv2.__version__)" || {
            echo "‚ùå OpenCV not installed correctly, attempting reinstall..."
            pip uninstall -y opencv-python numpy
            pip install --no-cache-dir opencv-python==4.9.0.80 numpy==1.26.4 2> opencv_install.log || {
              echo "‚ùå OpenCV reinstall failed"
              cat opencv_install.log
              exit 1
            }
            python -c "import cv2; print('OpenCV version:', cv2.__version__)" || {
              echo "‚ùå OpenCV verification failed after reinstall"
              exit cannibalize
            }
          }
          echo "‚úÖ OpenCV installed successfully (version: $(python -c 'import cv2; print(cv2.__version__)'))"
          python -c "import manim; print('Manim version:', manim.__version__)" || {
            echo "‚ùå Manim not installed correctly, attempting reinstall..."
            pip uninstall -y manim
            pip install --no-cache-dir manim==0.18.1 2> manim_install.log || {
              echo "‚ùå Manim reinstall failed"
              cat manim_install.log
              exit 1
            }
            python -c "import manim; print('Manim version:', manim.__version__)" || {
              echo "‚ùå Manim verification failed after reinstall"
              exit 1
            }
          }
          echo "‚úÖ Manim ready (version: $(python -c 'import manim; print(manim.__version__)'))"
          python -c "import moviepy; print('MoviePy version:', moviepy.__version__)" || {
            echo "‚ùå MoviePy not installed correctly, attempting reinstall..."
            pip uninstall -y moviepy
            pip install --no-cache-dir moviepy==1.0.3 2> moviepy_install.log || {
              echo "‚ùå MoviePy reinstall failed"
              cat moviepy_install.log
              exit 1
            }
            python -c "import moviepy; print('MoviePy version:', moviepy.__version__)" || {
              echo "‚ùå MoviePy verification failed after reinstall"
              exit 1
            }
          }
          echo "‚úÖ MoviePy ready (version: $(python -c 'import moviepy; print(moviepy.__version__)'))"
          python -c "import nltk; print('NLTK version:', nltk.__version__)" || {
            echo "‚ùå NLTK not installed correctly, attempting reinstall..."
            pip uninstall -y nltk
            pip install --no-cache-dir nltk==3.9.1 2> nltk_install.log || {
              echo "‚ùå NLTK reinstall failed"
              cat nltk_install.log
              exit 1
            }
            python -c "import nltk; print('NLTK version:', nltk.__version__)" || {
              echo "‚ùå NLTK verification failed after reinstall"
              exit 1
            }
          }
          echo "‚úÖ NLTK ready (version: $(python -c 'import nltk; print(nltk.__version__)'))"

      - name: Check disk space and memory
        run: |
          echo "üîç Checking available disk space and memory..."
          df -h
          free -m
          echo "‚úÖ Resource check completed"

      - name: Install Python dependencies
        run: |
          echo "üì¶ Installing Python dependencies..."
          start_time=$(date +%s)
          pip install --no-cache-dir -r requirements.txt 2> pip_install.log || {
            echo "‚ùå pip install failed"
            cat pip_install.log
            exit 1
          }
          pip install --no-cache-dir opencv-python==4.9.0.80 numpy==1.26.4 2> opencv_install.log || {
            echo "‚ùå OpenCV installation failed"
            cat opencv_install.log
            exit 1
          }
          pip install --no-cache-dir manim==0.18.1 2> manim_install.log || {
            echo "‚ùå Manim installation failed"
            cat manim_install.log
            exit 1
          }
          pip install --no-cache-dir moviepy==1.0.3 2> moviepy_install.log || {
            echo "‚ùå MoviePy installation failed"
            cat moviepy_install.log
            exit 1
          }
          pip install --no-cache-dir nltk==3.9.1 2> nltk_install.log || {
            echo "‚ùå NLTK installation failed"
            cat nltk_install.log
            exit 1
          }
          pip install --no-cache-dir Pillow==10.4.0 2> pillow_install.log || {
            echo "‚ùå Pillow installation failed"
            cat pillow_install.log
            exit 1
          }
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "‚úÖ Python dependencies installed in $duration seconds"
          pip list

      - name: Download NLTK data
        run: |
          echo "üì• Downloading NLTK data..."
          for attempt in {1..5}; do
            python -c "import nltk; nltk.download('punkt', download_dir='/home/runner/nltk_data'); nltk.download('punkt_tab', download_dir='/home/runner/nltk_data'); nltk.download('averaged_perceptron_tagger', download_dir='/home/runner/nltk_data'); nltk.download('averaged_perceptron_tagger_eng', download_dir='/home/runner/nltk_data')" 2> nltk_download.log && break
            echo "‚ö†Ô∏è NLTK data download attempt $attempt failed, retrying after 5 seconds..."
            cat nltk_download.log
            sleep 5
          done || {
            echo "‚ùå NLTK data download failed after 5 attempts"
            cat nltk_download.log
            exit 1
          }
          echo "üîç Verifying NLTK data..."
          python -c "import nltk; nltk.data.find('tokenizers/punkt'); nltk.data.find('tokenizers/punkt_tab'); nltk.data.find('taggers/averaged_perceptron_tagger'); nltk.data.find('taggers/averaged_perceptron_tagger_eng')" 2> nltk_verify.log || {
            echo "‚ùå NLTK data verification failed"
            cat nltk_verify.log
            exit 1
          }
          echo "‚úÖ NLTK data downloaded and verified"

      - name: Search for proxies references in code
        run: |
          echo "üîç Searching for 'proxies' references in Python files..."
          PROXIES_FOUND=$(grep -r "proxies" . --include="*.py" || true)
          if [ -n "$PROXIES_FOUND" ]; then
            echo "‚ùå Found 'proxies' references in the following files:"
            echo "$PROXIES_FOUND"
            echo "üîß Files that need to be fixed:"
            grep -l "proxies" . --include="*.py" || true
            echo "üí° These files likely contain the problematic 'proxies' parameter"
            echo "üìÑ Context around each match:"
            grep -rn -B2 -A2 "proxies" . --include="*.py" || true
            exit 1
          else
            echo "‚úÖ No 'proxies' references found in Python files"
          fi
          echo "üîç Checking for common variations..."
          PROXY_VARIATIONS=$(grep -ri "proxy\|http_proxy\|https_proxy" . --include="*.py" | grep -v "# " || true)
          if [ -n "$PROXY_VARIATIONS" ]; then
            echo "‚ö†Ô∏è Found proxy-related references:"
            echo "$PROXY_VARIATIONS"
          else
            echo "‚úÖ No proxy variations found"
          fi

      - name: Log script contents for debugging
        run: |
          echo "üîç Logging contents of main.py and utils/*.py..."
          echo "üìÑ main.py:"
          cat main.py || echo "‚ùå main.py not found"
          echo "üìÑ utils/scripting.py:"
          cat utils/scripting.py || echo "‚ùå utils/scripting.py not found"
          echo "üìÑ utils/video.py:"
          cat utils/video.py || echo "‚ùå utils/video.py not found"
          echo "üìÑ utils/youtube_uploader.py:"
          cat utils/youtube_uploader.py || echo "‚ùå utils/youtube_uploader.py not found"
          echo "üìÑ utils/voice.py:"
          cat utils/voice.py || echo "‚ùå utils/voice.py not found"
          echo "üìÑ utils/thumbnail_generator.py:"
          cat utils/thumbnail_generator.py || echo "‚ùå utils/thumbnail_generator.py not found"
          echo "üìÑ utils/topic_rotator.py:"
          cat utils/topic_rotator.py || echo "‚ùå utils/topic_rotator.py not found"
          echo "‚úÖ Script contents logged"

      - name: Fix namespace packages and verify installations
        run: |
          echo "üîß Fixing namespace packages and performing comprehensive verification..."
          python -c "
          import sys
          import subprocess
          import importlib
          import os
          print('üêç Python version:', sys.version)
          print('üîç Python executable:', sys.executable)
          print('üìÅ Python path:')
          for path in sys.path:
              print(f'   {path}')
          print('\nüîß Fixing Google namespace packages...')
          site_packages_dirs = []
          for path in sys.path:
              if path and 'site-packages' in path and os.path.exists(path):
                  site_packages_dirs.append(path)
          print(f'Found site-packages directories: {site_packages_dirs}')
          google_packages = []
          for site_dir in site_packages_dirs:
              try:
                  packages = [pkg for pkg in os.listdir(site_dir) if pkg.startswith('google') and os.path.isdir(os.path.join(site_dir, pkg))]
                  google_packages.extend(packages)
              except (OSError, PermissionError) as e:
                  print(f'Could not list {site_dir}: {e}')
          print(f'Found Google packages: {list(set(google_packages))}')
          import shutil
          for site_packages in site_packages_dirs:
              gridfs_dir = os.path.join(site_packages, 'gridfs')
              if os.path.exists(gridfs_dir):
                  pycache_dir = os.path.join(gridfs_dir, '__pycache__')
                  if os.path.exists(pycache_dir):
                      try:
                          shutil.rmtree(pycache_dir)
                          print(f'‚úÖ Removed {pycache_dir}')
                      except Exception as e:
                          print(f'‚ö†Ô∏è Could not remove {pycache_dir}: {e}')
          test_results = []
          def test_import_advanced(module_name, import_statement, display_name=None):
              if display_name is None:
                  display_name = module_name
              try:
                  if module_name in sys.modules:
                      del sys.modules[module_name]
                  if module_name == 'moviepy':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'moviepy' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name.startswith('google'):
                      modules_to_clear = [mod for mod in sys.modules.keys() if mod.startswith('google')]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'openai':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'openai' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'replicate':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'replicate' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'cv2':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'cv2' in mod or 'opencv' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'manim':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'manim' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  elif module_name == 'nltk':
                      modules_to_clear = [mod for mod in sys.modules.keys() if 'nltk' in mod]
                      for mod in modules_to_clear:
                          del sys.modules[mod]
                  exec(import_statement)
                  if module_name == 'cv2':
                      import cv2
                      if not hasattr(cv2, 'imread') or not hasattr(cv2, 'cvtColor'):
                          raise AttributeError('OpenCV missing critical attributes (imread, cvtColor)')
                  print(f'‚úÖ {display_name}: Import successful')
                  test_results.append((display_name, True, 'OK'))
                  return True
              except Exception as e:
                  print(f'‚ùå {display_name}: {str(e)}')
                  test_results.append((display_name, False, str(e)))
                  if module_name == 'cv2' and 'cv2.gapi.wip.draw' in str(e):
                      try:
                          import cv2
                          if hasattr(cv2, 'imread') and hasattr(cv2, 'cvtColor'):
                              print(f'‚úÖ {display_name}: Functional despite G-API error')
                              test_results.append((display_name, True, 'OK despite G-API error'))
                              return True
                          else:
                              print(f'‚ùå {display_name}: Missing critical attributes after G-API error')
                      except Exception as e2:
                          print(f'‚ùå {display_name}: Verification failed: {e2}')
                  return False
          print('\nüîç Testing imports with advanced verification...')
          test_import_advanced('numpy', 'import numpy')
          test_import_advanced('PIL', 'from PIL import Image')
          test_import_advanced('openai', 'import openai')
          test_import_advanced('gtts', 'from gtts import gTTS')
          test_import_advanced('pydub', 'from pydub import AudioSegment')
          test_import_advanced('requests', 'import requests')
          test_import_advanced('replicate', 'import replicate')
          test_import_advanced('cv2', 'import cv2', 'OpenCV')
          test_import_advanced('manim', 'from manim import *')
          test_import_advanced('nltk', 'import nltk')
          print('\nüé¨ Testing MoviePy with fallback strategies...')
          moviepy_success = False
          try:
              import moviepy
              import moviepy.editor as mpe
              print(f'‚úÖ MoviePy Strategy 1 (direct): Success')
              moviepy_success = True
          except Exception as e:
              print(f'‚ùå MoviePy Strategy 1 failed: {e}')
              try:
                  print('üîß MoviePy Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'moviepy'],
                              capture_output=True, check=False)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'moviepy==1.0.3'], capture_output=True, check=True)
                  for mod in list(sys.modules.keys()):
                      if 'moviepy' in mod:
                          del sys.modules[mod]
                  import moviepy.editor as mpe
                  print('‚úÖ MoviePy Strategy 2 (reinstall): Success')
                  moviepy_success = True
              except Exception as e2:
                  print(f'‚ùå MoviePy Strategy 2 failed: {e2}')
                  try:
                      print('üîß MoviePy Strategy 3: Different version...')
                      subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                    '--force-reinstall', 'moviepy==1.0.3'],
                                  capture_output=True, check=True)
                      for mod in list(sys.modules.keys()):
                          if 'moviepy' in mod:
                              del sys.modules[mod]
                      import moviepy.editor as mpe
                      print('‚úÖ MoviePy Strategy 3 (v1.0.3): Success')
                      moviepy_success = True
                  except Exception as e3:
                      print(f'‚ùå MoviePy Strategy 3 failed: {e3}')
          test_results.append(('MoviePy', moviepy_success, 'OK' if moviepy_success else 'Failed'))
          print('\nüîç Testing Google Auth with fallback strategies...')
          google_success = False
          try:
              import google.auth
              import google_auth_oauthlib
              import googleapiclient.discovery
              print('‚úÖ Google Auth Strategy 1 (direct): Success')
              google_success = True
          except Exception as e:
              print(f'‚ùå Google Auth Strategy 1 failed: {e}')
              try:
                  print('üîß Google Auth Strategy 2: Namespace fix...')
                  for mod in list(sys.modules.keys()):
                      if mod.startswith('google'):
                          del sys.modules[mod]
                  subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y',
                                'google-auth', 'google-auth-oauthlib', 'google-api-python-client'],
                              capture_output=True, check=False)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'google-auth'], capture_output=True, check=True)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'google-auth-oauthlib'], capture_output=True, check=True)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'google-api-python-client'], capture_output=True, check=True)
                  import google.auth
                  print('‚úÖ Google Auth Strategy 2 (namespace fix): Success')
                  google_success = True
              except Exception as e2:
                  print(f'‚ùå Google Auth Strategy 2 failed: {e2}')
          test_results.append(('Google Auth', google_success, 'OK' if google_success else 'Failed'))
          print('\nüîç Testing OpenAI with fallback strategies...')
          openai_success = False
          try:
              import openai
              print('‚úÖ OpenAI Strategy 1 (direct): Success')
              openai_success = True
          except Exception as e:
              print(f'‚ùå OpenAI Strategy 1 failed: {e}')
              try:
                  print('üîß OpenAI Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'openai'],
                              capture_output=True, check=False)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'openai==1.93.0'], capture_output=True, check=True)
                  for mod in list(sys.modules.keys()):
                      if 'openai' in mod:
                          del sys.modules[mod]
                  import openai
                  print('‚úÖ OpenAI Strategy 2 (reinstall): Success')
                  openai_success = True
              except Exception as e2:
                  print(f'‚ùå OpenAI Strategy 2 failed: {e2}')
          test_results.append(('OpenAI', openai_success, 'OK' if openai_success else 'Failed'))
          print('\nüîç Testing Replicate with fallback strategies...')
          replicate_success = False
          try:
              import replicate
              print('‚úÖ Replicate Strategy 1 (direct): Success')
              replicate_success = True
          except Exception as e:
              print(f'‚ùå Replicate Strategy 1 failed: {e}')
              try:
                  print('üîß Replicate Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'replicate'],
                              capture_output=True, check=False)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'replicate'], capture_output=True, check=True)
                  for mod in list(sys.modules.keys()):
                      if 'replicate' in mod:
                          del sys.modules[mod]
                  import replicate
                  print('‚úÖ Replicate Strategy 2 (reinstall): Success')
                  replicate_success = True
              except Exception as e2:
                  print(f'‚ùå Replicate Strategy 2 failed: {e2}')
          test_results.append(('Replicate', replicate_success, 'OK' if replicate_success else 'Failed'))
          print('\nüîç Testing OpenCV with fallback strategies...')
          opencv_success = False
          try:
              import cv2
              print(f'‚úÖ OpenCV Strategy 1 (direct): Success (version: {cv2.__version__})')
              opencv_success = True
          except Exception as e:
              print(f'‚ùå OpenCV Strategy 1 failed: {e}')
              try:
                  print('üîß OpenCV Strategy 2: Installing 4.9.0.80...')
                  subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'opencv-python', 'numpy'],
                              capture_output=True, check=False)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'opencv-python==4.9.0.80', 'numpy==1.26.4'], capture_output=True, check=True)
                  for mod in list(sys.modules.keys()):
                      if 'cv2' in mod or 'opencv' in mod:
                          del sys.modules[mod]
                  import cv2
                  if hasattr(cv2, 'imread') and hasattr(cv2, 'cvtColor'):
                      print(f'‚úÖ OpenCV Strategy 2 (4.9.0.80): Success (version: {cv2.__version__})')
                      opencv_success = True
                  else:
                      print('‚ùå OpenCV Strategy 2: Missing critical attributes (imread, cvtColor)')
              except Exception as e2:
                  print(f'‚ùå OpenCV Strategy 2 failed: {e2}')
          test_results.append(('OpenCV', opencv_success, 'OK' if opencv_success else 'Failed'))
          print('\nüîç Testing Manim with fallback strategies...')
          manim_success = False
          try:
              import manim
              print(f'‚úÖ Manim Strategy 1 (direct): Success (version: {manim.__version__})')
              manim_success = True
          except Exception as e:
              print(f'‚ùå Manim Strategy 1 failed: {e}')
              try:
                  print('üîß Manim Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'manim'],
                              capture_output=True, check=False)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'manim==0.18.1'], capture_output=True, check=True)
                  for mod in list(sys.modules.keys()):
                      if 'manim' in mod:
                          del sys.modules[mod]
                  import manim
                  print(f'‚úÖ Manim Strategy 2 (reinstall): Success (version: {manim.__version__})')
                  manim_success = True
              except Exception as e2:
                  print(f'‚ùå Manim Strategy 2 failed: {e2}')
          test_results.append(('Manim', manim_success, 'OK' if manim_success else 'Failed'))
          print('\nüîç Testing NLTK with fallback strategies...')
          nltk_success = False
          try:
              import nltk
              print(f'‚úÖ NLTK Strategy 1 (direct): Success (version: {nltk.__version__})')
              nltk_success = True
          except Exception as e:
              print(f'‚ùå NLTK Strategy 1 failed: {e}')
              try:
                  print('üîß NLTK Strategy 2: Reinstalling...')
                  subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'nltk'],
                              capture_output=True, check=False)
                  subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                                'nltk==3.9.1'], capture_output=True, check=True)
                  for mod in list(sys.modules.keys()):
                      if 'nltk' in mod:
                          del sys.modules[mod]
                  import nltk
                  print(f'‚úÖ NLTK Strategy 2 (reinstall): Success (version: {nltk.__version__})')
                  nltk_success = True
              except Exception as e2:
                  print(f'‚ùå NLTK Strategy 2 failed: {e2}')
          test_results.append(('NLTK', nltk_success, 'OK' if nltk_success else 'Failed'))
          failed = [name for name, success, _ in test_results if not success]
          if failed:
              print(f'\n‚ùå Failed imports: {failed}')
              print('\n‚ö†Ô∏è Some packages failed to import. The script will attempt to continue...')
              print('\nDiagnostic information:')
              print('Available packages:')
              result = subprocess.run([sys.executable, '-m', 'pip', 'list'],
                                    capture_output=True, text=True)
              if result.returncode == 0:
                  for line in result.stdout.split('\n'):
                      if any(pkg in line.lower() for pkg in ['moviepy', 'google', 'openai', 'requests', 'replicate', 'opencv', 'manim', 'nltk']):
                          print(f'   {line}')
          else:
              print('\n‚úÖ All critical packages verified successfully!')
          "

      - name: Clear Python module cache before automation
        run: |
          echo "üßπ Clearing Python module cache before automation..."
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} +
          echo "‚úÖ Module cache cleared"

      - name: Create output directories
        run: |
          mkdir -p output
          mkdir -p logs
          echo "‚úÖ Output directories created"

      - name: Set up YouTube credentials
        env:
          YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
          YOUTUBE_TOKEN: ${{ secrets.YOUTUBE_TOKEN }}
        run: |
          echo "üîç Setting up YouTube credentials..."
          if [ -n "$YOUTUBE_CREDENTIALS" ]; then
            echo "$YOUTUBE_CREDENTIALS" > credentials.json
            echo "‚úÖ YouTube OAuth 2.0 credentials restored"
            if command -v jq >/dev/null 2>&1; then
              echo "üîç Credentials structure (masked):"
              jq -r 'del(.client_secret, .client_id) | tostring' credentials.json || echo "‚ö†Ô∏è Failed to parse credentials with jq"
            else
              echo "‚ö†Ô∏è jq not found, cannot log credentials structure"
            fi
          else
            echo "‚ùå YOUTUBE_CREDENTIALS not provided"
            exit 1
          fi
          if [ -n "$YOUTUBE_TOKEN" ]; then
            echo "$YOUTUBE_TOKEN" | base64 -d > token.pickle
            echo "‚úÖ YouTube OAuth 2.0 token restored"
          else
            echo "‚ùå YOUTUBE_TOKEN not provided"
            exit 1
          fi
          echo "‚úÖ YouTube credentials setup completed"

      - name: Create environment file
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          REPLICATE_API_KEY: ${{ secrets.REPLICATE_API_KEY }}
          VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
          VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ùå OPENAI_API_KEY is not set in repository secrets"
            exit 1
          fi
          if [ -z "$PEXELS_API_KEY" ]; then
            echo "‚ùå PEXELS_API_KEY is not set in repository secrets"
            exit 1
          fi
          if [ -z "$REPLICATE_API_KEY" ]; then
            echo "‚ö†Ô∏è REPLICATE_API_KEY is not set - Llama fallback will be disabled"
            echo "‚ÑπÔ∏è Ensure your OpenAI API key has sufficient quota at https://platform.openai.com/account/billing"
          else
            echo "‚ÑπÔ∏è REPLICATE_API_KEY set - please ensure sufficient credits at https://replicate.com/account/billing"
          fi
          echo "‚ÑπÔ∏è Please verify your OpenAI API quota at https://platform.openai.com/account/billing to avoid 429 errors"
          cat > .env << EOF
          OPENAI_API_KEY=$OPENAI_API_KEY
          PEXELS_API_KEY=$PEXELS_API_KEY
          REPLICATE_API_KEY=$REPLICATE_API_KEY
          VIDEO_PRIVACY=$VIDEO_PRIVACY
          VIDEO_CATEGORY_ID=$VIDEO_CATEGORY_ID
          UPLOAD_TO_YOUTUBE=true
          EOF
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" >> .env
            echo "DISCORD_NOTIFICATIONS_ENABLED=true" >> $GITHUB_ENV
          else
            echo "DISCORD_NOTIFICATIONS_ENABLED=false" >> $GITHUB_ENV
          fi
          if [ -n "${{ github.event.inputs.topic_override }}" ]; then
            echo "TOPIC_OVERRIDE=${{ github.event.inputs.topic_override }}" >> .env
          fi
          if [ -n "${{ github.event.inputs.category_override }}" ]; then
            echo "CATEGORY_OVERRIDE=${{ github.event.inputs.category_override }}" >> .env
          fi
          echo "‚úÖ Environment file created"

      - name: Clear Python module cache before automation
        run: |
          echo "üßπ Clearing Python module cache before automation..."
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} +
          echo "‚úÖ Module cache cleared"

      - name: Validate pre-execution script
        run: |
          echo "üîç Validating pre-execution script syntax..."
          cat > logs/pre_execution_script.py << 'EOF'
          import sys
          import subprocess
          print('üîß Final pre-execution checks...')
          for mod in list(sys.modules.keys()):
              if 'moviepy' in mod:
                  del sys.modules[mod]
          try:
              import moviepy.editor
              print('‚úÖ MoviePy ready')
          except Exception as e:
              print(f'üîß Final MoviePy fix attempt... Error: {e}')
              subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'moviepy'], check=False)
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir', 'moviepy==1.0.3'], check=False)
              try:
                  import moviepy.editor
                  print('‚úÖ MoviePy installed successfully')
              except Exception as e2:
                  print(f'‚ùå MoviePy installation failed: {e2}')
          for mod in list(sys.modules.keys()):
              if mod.startswith('google'):
                  del sys.modules[mod]
          try:
              import google.auth
              print('‚úÖ Google Auth ready')
          except Exception as e:
              print(f'üîß Final Google Auth fix attempt... Error: {e}')
              subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y',
                            'google-auth', 'google-auth-oauthlib', 'google-api-python-client'], check=False)
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                            'google-auth', 'google-auth-oauthlib', 'google-api-python-client'], check=False)
              try:
                  import google.auth
                  print('‚úÖ Google Auth installed successfully')
              except Exception as e2:
                  print(f'‚ùå Google Auth installation failed: {e2}')
          for mod in list(sys.modules.keys()):
              if 'openai' in mod:
                  del sys.modules[mod]
          try:
              import openai
              print('‚úÖ OpenAI ready')
          except Exception as e:
              print(f'üîß Final OpenAI fix attempt... Error: {e}')
              subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'openai'], check=False)
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                            'openai==1.93.0'], check=False)
              try:
                  import openai
                  print('‚úÖ OpenAI installed successfully')
              except Exception as e2:
                  print(f'‚ùå OpenAI installation failed: {e2}')
          for mod in list(sys.modules.keys()):
              if 'replicate' in mod:
                  del sys.modules[mod]
          try:
              import replicate
              print('‚úÖ Replicate ready')
          except Exception as e:
              print(f'üîß Final Replicate fix attempt... Error: {e}')
              subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'replicate'], check=False)
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                            'replicate'], check=False)
              try:
                  import replicate
                  print('‚úÖ Replicate installed successfully')
              except Exception as e2:
                  print(f'‚ùå Replicate installation failed: {e2}')
          for mod in list(sys.modules.keys()):
              if 'cv2' in mod or 'opencv' in mod:
                  del sys.modules[mod]
          try:
              import cv2
              if hasattr(cv2, 'imread') and hasattr(cv2, 'cvtColor'):
                  print(f'‚úÖ OpenCV ready (version: {cv2.__version__})')
              else:
                  raise AttributeError('OpenCV missing critical attributes (imread, cvtColor)')
          except Exception as e:
              print(f'üîß Final OpenCV fix attempt... Error: {e}')
              subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'opencv-python', 'numpy'], check=False)
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                            'opencv-python==4.9.0.80', 'numpy==1.26.4'], check=False)
              try:
                  import cv2
                  if hasattr(cv2, 'imread') and hasattr(cv2, 'cvtColor'):
                      print(f'‚úÖ OpenCV installed successfully (version: {cv2.__version__})')
                  else:
                      print(f'‚ùå OpenCV installation failed: Missing critical attributes')
              except Exception as e2:
                  print(f'‚ùå OpenCV installation failed: {e2}')
          for mod in list(sys.modules.keys()):
              if 'manim' in mod:
                  del sys.modules[mod]
          try:
              import manim
              print(f'‚úÖ Manim ready (version: {manim.__version__})')
          except Exception as e:
              print(f'üîß Final Manim fix attempt... Error: {e}')
              subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'manim'], check=False)
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                            'manim==0.18.1'], check=False)
              try:
                  import manim
                  print(f'‚úÖ Manim installed successfully (version: {manim.__version__})')
              except Exception as e2:
                  print(f'‚ùå Manim installation failed: {e2}')
          for mod in list(sys.modules.keys()):
              if 'nltk' in mod:
                  del sys.modules[mod]
          try:
              import nltk
              print(f'‚úÖ NLTK ready (version: {nltk.__version__})')
          except Exception as e:
              print(f'üîß Final NLTK fix attempt... Error: {e}')
              subprocess.run([sys.executable, '-m', 'pip', 'uninstall', '-y', 'nltk'], check=False)
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--no-cache-dir',
                            'nltk==3.9.1'], check=False)
              try:
                  import nltk
                  print(f'‚úÖ NLTK installed successfully (version: {nltk.__version__})')
              except Exception as e2:
                  print(f'‚ùå NLTK installation failed: {e2}')
          print('üöÄ Ready to execute main script')
          EOF
          python -m py_compile logs/pre_execution_script.py || {
            echo "‚ùå Syntax error in pre-execution script"
            cat logs/pre_execution_script.py
            exit 1
          }
          echo "‚úÖ Pre-execution script syntax validated"

      - name: Run YouTube automation
        id: automation
        run: |
          echo "üöÄ Starting YouTube automation..."
          echo "üìÖ Timestamp: $(date)"
          echo "üêç Python version: $(python --version)"
          echo "üìÅ Working directory: $(pwd)"
          echo "üìã Final configuration:"
          echo "   - Upload enabled: true"
          echo "   - Video privacy: ${{ vars.VIDEO_PRIVACY || 'public' }}"
          echo "üîç Environment variables (sensitive values masked):"
          python -c "
          import os
          for key, value in sorted(os.environ.items()):
              if key in ['OPENAI_API_KEY', 'PEXELS_API_KEY', 'REPLICATE_API_KEY', 'YOUTUBE_CREDENTIALS', 'YOUTUBE_TOKEN', 'DISCORD_WEBHOOK_URL']:
                  print(f'   - {key}: ***')
              else:
                  print(f'   - {key}: {value}')
          "
          python logs/pre_execution_script.py
          set -o pipefail
          python main.py 2>&1 | tee automation.log
          EXIT_CODE=$PIPESTATUS[0]
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ùå Automation failed with exit code $EXIT_CODE"
            echo "üìã Last 20 lines of output:"
            tail -20 automation.log || echo "Could not read log file"
            exit $EXIT_CODE
          fi
          echo "‚úÖ Automation completed successfully"

      - name: Debug environment on failure
        if: failure()
        run: |
          echo "üîç Debugging environment..."
          pip list
          python -m site
          echo "‚úÖ Environment debug info collected"

      - name: Save updated YouTube token
        if: always() && env.UPLOAD_TO_YOUTUBE == 'true'
        id: save_token
        run: |
          if [ -f token.pickle ]; then
            base64 -w 0 token.pickle > token_updated.txt
            echo "token_content=$(cat token_updated.txt)" >> $GITHUB_OUTPUT
            echo "‚úÖ Updated token prepared for storage"
          else
            echo "‚ÑπÔ∏è No token.pickle file found to save"
          fi

      - name: Upload artifacts on failure or partial success
        if: failure() || steps.automation.outputs.exit_code == '2'
        uses: actions/upload-artifact@v4
        with:
          name: automation-failure-logs-${{ github.run_number }}
          path: |
            automation.log
            output/
            logs/
            *.json
            *.txt
            *.env
          retention-days: 7

      - name: Upload successful artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: automation-success-${{ github.run_number }}
          path: |
            output/
            logs/
            automation.log
          retention-days: 3

      - name: Notify Discord on failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            echo "üì¢ Sending Discord notification..."
            ERROR_MESSAGE=$(tail -n 50 logs/automation_$(date +%Y%m%d).log | jq -Rs .)
            curl -H "Content-Type: application/json" -X POST \
              -d "{\"content\": \"‚ùå YouTube Automation failed on $(date -u). Last 50 lines of log:\n\`\`\`$ERROR_MESSAGE\`\`\`\"}" \
              "$DISCORD_WEBHOOK_URL" || echo "‚ö†Ô∏è Discord notification failed"
          else
            echo "‚ÑπÔ∏è No Discord webhook configured, skipping notification"
          fi

      - name: Extract video information
        if: success()
        id: video_info
        run: |
          VIDEO_TITLE=$(grep -E "^‚úÖ Topic:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
          VIDEO_ID=$(grep "Video uploaded with ID:" automation.log | tail -1 | awk '{print $NF}' 2>/dev/null || echo "")
          VIDEO_CATEGORY=$(grep -E "^‚úÖ Category:" automation.log | head -1 | cut -d' ' -f3- 2>/dev/null || echo "Unknown")
          VIDEO_TITLE=$(echo "$VIDEO_TITLE" | sed 's/[^a-zA-Z0-9 .,!?-]//g' | head -c 100)
          VIDEO_ID=$(echo "$VIDEO_ID" | grep -E '^[a-zA-Z0-9_-]{11}$' || echo "")
          echo "video_title=$VIDEO_TITLE" >> $GITHUB_OUTPUT
          echo "video_id=$VIDEO_ID" >> $GITHUB_OUTPUT
          echo "video_category=$VIDEO_CATEGORY" >> $GITHUB_OUTPUT