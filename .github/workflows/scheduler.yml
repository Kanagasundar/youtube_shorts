name: YouTube Automation

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9:00 AM UTC
  workflow_dispatch:
    inputs:
      topic_override:
        description: 'Override topic (optional)'
        required: false
        type: string
      category_override:
        description: 'Override category (optional)'
        required: false
        type: string

jobs:
  youtube-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg imagemagick
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup credentials
      env:
        YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
        YOUTUBE_TOKEN: ${{ secrets.YOUTUBE_TOKEN }}
      run: |
        if [ -n "$YOUTUBE_CREDENTIALS" ]; then
          echo "$YOUTUBE_CREDENTIALS" > credentials.json
          echo "✅ YouTube credentials configured"
        fi
        
        if [ -n "$YOUTUBE_TOKEN" ]; then
          echo "$YOUTUBE_TOKEN" | base64 -d > token.pickle
          echo "✅ YouTube token restored"
        fi

    - name: Create environment
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEO_PRIVACY: ${{ vars.VIDEO_PRIVACY || 'public' }}
        VIDEO_CATEGORY_ID: ${{ vars.VIDEO_CATEGORY_ID || '28' }}
        UPLOAD_TO_YOUTUBE: ${{ vars.ENABLE_UPLOAD || 'true' }}
      run: |
        cat > .env << EOF
        OPENAI_API_KEY=$OPENAI_API_KEY
        VIDEO_PRIVACY=$VIDEO_PRIVACY
        VIDEO_CATEGORY_ID=$VIDEO_CATEGORY_ID
        UPLOAD_TO_YOUTUBE=$UPLOAD_TO_YOUTUBE
        TOPIC_OVERRIDE=${{ github.event.inputs.topic_override }}
        CATEGORY_OVERRIDE=${{ github.event.inputs.category_override }}
        EOF

    - name: Run automation
      run: python main.py

    - name: Save token
      if: always()
      run: |
        if [ -f token.pickle ]; then
          base64 -w 0 token.pickle > token_b64.txt
          echo "TOKEN_UPDATED=true" >> $GITHUB_ENV
        fi

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: automation-output-${{ github.run_number }}
        path: |
          output/
          *.log
        retention-days: 7

    - name: Notification
      if: always() && secrets.DISCORD_WEBHOOK_URL
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        STATUS="${{ job.status }}"
        if [ "$STATUS" = "success" ]; then
          EMOJI="✅"
          COLOR="5763719"
        else
          EMOJI="❌"
          COLOR="15158332"
        fi
        
        curl -H "Content-Type: application/json" -X POST -d "{
          \"embeds\": [{
            \"title\": \"$EMOJI YouTube Automation $STATUS\",
            \"description\": \"Run #${{ github.run_number }} completed\",
            \"color\": $COLOR,
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
          }]
        }" "$DISCORD_WEBHOOK_URL" || true